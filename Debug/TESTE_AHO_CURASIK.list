
TESTE_AHO_CURASIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003130  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  080031f0  080031f0  000041f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b0  080036b0  000050bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080036b0  080036b0  000050bc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080036b0  080036b0  000050bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b0  080036b0  000046b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036b4  080036b4  000046b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  080036b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001870  200000bc  08003774  000050bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000192c  08003774  0000592c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000050bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a99  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f0  00000000  00000000  0000cb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000e170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c7  00000000  00000000  0000e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc30  00000000  00000000  0000ec7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009066  00000000  00000000  0001e8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d0c4  00000000  00000000  00027915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000849d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c8  00000000  00000000  00084a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000863e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000bc 	.word	0x200000bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031d8 	.word	0x080031d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c0 	.word	0x200000c0
 8000104:	080031d8 	.word	0x080031d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <char_to_index>:
// O vértice 0 é sempre a raiz do Trie.
static const uint8_t ROOT_VERTEX = 0;

// Converte um caractere para um índice no alfabeto (0-25).
// Retorna -1 se o caractere for inválido. A busca é case-insensitive.
static int char_to_index(char c) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
    if (c >= 'A' && c <= 'Z') return c - 'A';
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b40      	cmp	r3, #64	@ 0x40
 800042a:	d907      	bls.n	800043c <char_to_index+0x24>
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b5a      	cmp	r3, #90	@ 0x5a
 8000432:	d803      	bhi.n	800043c <char_to_index+0x24>
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	3b41      	subs	r3, #65	@ 0x41
 800043a:	e00d      	b.n	8000458 <char_to_index+0x40>
    if (c >= 'a' && c <= 'z') return c - 'a';
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b60      	cmp	r3, #96	@ 0x60
 8000442:	d907      	bls.n	8000454 <char_to_index+0x3c>
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b7a      	cmp	r3, #122	@ 0x7a
 800044a:	d803      	bhi.n	8000454 <char_to_index+0x3c>
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	3b61      	subs	r3, #97	@ 0x61
 8000452:	e001      	b.n	8000458 <char_to_index+0x40>
    return -1;
 8000454:	2301      	movs	r3, #1
 8000456:	425b      	negs	r3, r3
}
 8000458:	0018      	movs	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	b002      	add	sp, #8
 800045e:	bd80      	pop	{r7, pc}

08000460 <ac_init>:

static uint8_t find_transition(const ac_vertex_t *v, uint8_t char_idx);
static uint8_t get_next_state(ac_automaton_t *ac, uint8_t current_state, uint8_t char_idx);
static void report_matches(ac_automaton_t *ac, uint8_t state, int text_pos);

void ac_init(ac_automaton_t *ac, ac_match_callback_t callback) {
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
    if (!ac) return;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d021      	beq.n	80004b4 <ac_init+0x54>

    memset(ac, 0, sizeof(ac_automaton_t));
 8000470:	4a12      	ldr	r2, [pc, #72]	@ (80004bc <ac_init+0x5c>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2100      	movs	r1, #0
 8000476:	0018      	movs	r0, r3
 8000478:	f002 fa34 	bl	80028e4 <memset>
    ac->match_callback = callback;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4910      	ldr	r1, [pc, #64]	@ (80004c0 <ac_init+0x60>)
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	505a      	str	r2, [r3, r1]
    aho_queue_init(&ac->queue);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <ac_init+0x64>)
 8000488:	4694      	mov	ip, r2
 800048a:	4463      	add	r3, ip
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fae1 	bl	8000a54 <aho_queue_init>

    ac->vertex_count = 1;
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	2391      	movs	r3, #145	@ 0x91
 8000496:	015b      	lsls	r3, r3, #5
 8000498:	2101      	movs	r1, #1
 800049a:	54d1      	strb	r1, [r2, r3]
    ac->vertices[ROOT_VERTEX].link = ROOT_VERTEX;
 800049c:	2300      	movs	r3, #0
 800049e:	0018      	movs	r0, r3
 80004a0:	2400      	movs	r4, #0
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	2135      	movs	r1, #53	@ 0x35
 80004a6:	233a      	movs	r3, #58	@ 0x3a
 80004a8:	4343      	muls	r3, r0
 80004aa:	18d3      	adds	r3, r2, r3
 80004ac:	185b      	adds	r3, r3, r1
 80004ae:	1c22      	adds	r2, r4, #0
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	e000      	b.n	80004b6 <ac_init+0x56>
    if (!ac) return;
 80004b4:	46c0      	nop			@ (mov r8, r8)
}
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b003      	add	sp, #12
 80004ba:	bd90      	pop	{r4, r7, pc}
 80004bc:	00001678 	.word	0x00001678
 80004c0:	00001674 	.word	0x00001674
 80004c4:	00001621 	.word	0x00001621

080004c8 <ac_add_pattern>:

// Adiciona um padrão ao Trie
bool ac_add_pattern(ac_automaton_t *ac, const char* pattern) {
 80004c8:	b5b0      	push	{r4, r5, r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
    if (!ac || !pattern || *pattern == '\0' || ac->pattern_count >= AC_MAX_PATTERNS) {
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d00c      	beq.n	80004f2 <ac_add_pattern+0x2a>
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d009      	beq.n	80004f2 <ac_add_pattern+0x2a>
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d005      	beq.n	80004f2 <ac_add_pattern+0x2a>
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	23b1      	movs	r3, #177	@ 0xb1
 80004ea:	015b      	lsls	r3, r3, #5
 80004ec:	5cd3      	ldrb	r3, [r2, r3]
 80004ee:	2bff      	cmp	r3, #255	@ 0xff
 80004f0:	d101      	bne.n	80004f6 <ac_add_pattern+0x2e>
        return false;
 80004f2:	2300      	movs	r3, #0
 80004f4:	e0d6      	b.n	80006a4 <ac_add_pattern+0x1dc>
    }

    uint8_t current_vertex = ROOT_VERTEX;
 80004f6:	2327      	movs	r3, #39	@ 0x27
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
    int pattern_len = strlen(pattern);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	0018      	movs	r0, r3
 8000502:	f7ff fe01 	bl	8000108 <strlen>
 8000506:	0003      	movs	r3, r0
 8000508:	61bb      	str	r3, [r7, #24]

    // Verifica se há espaço para os novos vértices
    if (ac->vertex_count + pattern_len > AC_MAX_VERTICES) {
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	2391      	movs	r3, #145	@ 0x91
 800050e:	015b      	lsls	r3, r3, #5
 8000510:	5cd3      	ldrb	r3, [r2, r3]
 8000512:	001a      	movs	r2, r3
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	18d3      	adds	r3, r2, r3
 8000518:	2b50      	cmp	r3, #80	@ 0x50
 800051a:	dd01      	ble.n	8000520 <ac_add_pattern+0x58>
        DEBUG_PRINTF("Erro: Nao ha vertices suficientes para o padrao \"%s\"\n", pattern);
        return false;
 800051c:	2300      	movs	r3, #0
 800051e:	e0c1      	b.n	80006a4 <ac_add_pattern+0x1dc>
    }

    // Adiciona o caminho do padrão no Trie
    for (int i = 0; i < pattern_len; ++i) {
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]
 8000524:	e07f      	b.n	8000626 <ac_add_pattern+0x15e>
        int char_idx = char_to_index(pattern[i]);
 8000526:	6a3b      	ldr	r3, [r7, #32]
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	18d3      	adds	r3, r2, r3
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ff72 	bl	8000418 <char_to_index>
 8000534:	0003      	movs	r3, r0
 8000536:	613b      	str	r3, [r7, #16]
        if (char_idx == -1) continue; // Ignora caracteres inválidos
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	3301      	adds	r3, #1
 800053c:	d06f      	beq.n	800061e <ac_add_pattern+0x156>

        uint8_t next_vertex = find_transition(&ac->vertices[current_vertex], (uint8_t)char_idx);
 800053e:	2327      	movs	r3, #39	@ 0x27
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	223a      	movs	r2, #58	@ 0x3a
 8000546:	4353      	muls	r3, r2
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	18d3      	adds	r3, r2, r3
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	251f      	movs	r5, #31
 8000552:	197c      	adds	r4, r7, r5
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f000 f9ac 	bl	80008b4 <find_transition>
 800055c:	0003      	movs	r3, r0
 800055e:	7023      	strb	r3, [r4, #0]

        if (next_vertex == INVALID_VERTEX_U8) {
 8000560:	002c      	movs	r4, r5
 8000562:	193b      	adds	r3, r7, r4
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2bff      	cmp	r3, #255	@ 0xff
 8000568:	d152      	bne.n	8000610 <ac_add_pattern+0x148>
            next_vertex = ac->vertex_count++;
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	2391      	movs	r3, #145	@ 0x91
 800056e:	015b      	lsls	r3, r3, #5
 8000570:	5cd3      	ldrb	r3, [r2, r3]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	b2d0      	uxtb	r0, r2
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	2291      	movs	r2, #145	@ 0x91
 800057a:	0152      	lsls	r2, r2, #5
 800057c:	5488      	strb	r0, [r1, r2]
 800057e:	193a      	adds	r2, r7, r4
 8000580:	7013      	strb	r3, [r2, #0]
            if (next_vertex >= AC_MAX_VERTICES) return false; // Segurança
 8000582:	193b      	adds	r3, r7, r4
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b4f      	cmp	r3, #79	@ 0x4f
 8000588:	d901      	bls.n	800058e <ac_add_pattern+0xc6>
 800058a:	2300      	movs	r3, #0
 800058c:	e08a      	b.n	80006a4 <ac_add_pattern+0x1dc>

            memset(&ac->vertices[next_vertex], 0, sizeof(ac_vertex_t));
 800058e:	241f      	movs	r4, #31
 8000590:	193b      	adds	r3, r7, r4
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	223a      	movs	r2, #58	@ 0x3a
 8000596:	4353      	muls	r3, r2
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	18d3      	adds	r3, r2, r3
 800059c:	223a      	movs	r2, #58	@ 0x3a
 800059e:	2100      	movs	r1, #0
 80005a0:	0018      	movs	r0, r3
 80005a2:	f002 f99f 	bl	80028e4 <memset>
            ac->vertices[next_vertex].link = INVALID_VERTEX_U8;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	2135      	movs	r1, #53	@ 0x35
 80005ae:	203a      	movs	r0, #58	@ 0x3a
 80005b0:	4343      	muls	r3, r0
 80005b2:	18d3      	adds	r3, r2, r3
 80005b4:	185b      	adds	r3, r3, r1
 80005b6:	22ff      	movs	r2, #255	@ 0xff
 80005b8:	701a      	strb	r2, [r3, #0]

            ac_vertex_t *v = &ac->vertices[current_vertex];
 80005ba:	2327      	movs	r3, #39	@ 0x27
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	223a      	movs	r2, #58	@ 0x3a
 80005c2:	4353      	muls	r3, r2
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	18d3      	adds	r3, r2, r3
 80005c8:	60fb      	str	r3, [r7, #12]
            if (v->num_transitions < AC_MAX_TRANSITIONS_PER_VERTEX) {
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2234      	movs	r2, #52	@ 0x34
 80005ce:	5c9b      	ldrb	r3, [r3, r2]
 80005d0:	2b19      	cmp	r3, #25
 80005d2:	d81b      	bhi.n	800060c <ac_add_pattern+0x144>
                v->transitions[v->num_transitions].character = (uint8_t)char_idx;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2234      	movs	r2, #52	@ 0x34
 80005d8:	5c9b      	ldrb	r3, [r3, r2]
 80005da:	001a      	movs	r2, r3
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	b2d9      	uxtb	r1, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	0052      	lsls	r2, r2, #1
 80005e4:	54d1      	strb	r1, [r2, r3]
                v->transitions[v->num_transitions].next_vertex = next_vertex;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2234      	movs	r2, #52	@ 0x34
 80005ea:	5c9b      	ldrb	r3, [r3, r2]
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	18d3      	adds	r3, r2, r3
 80005f2:	3301      	adds	r3, #1
 80005f4:	193a      	adds	r2, r7, r4
 80005f6:	7812      	ldrb	r2, [r2, #0]
 80005f8:	701a      	strb	r2, [r3, #0]
                v->num_transitions++;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2234      	movs	r2, #52	@ 0x34
 80005fe:	5c9b      	ldrb	r3, [r3, r2]
 8000600:	3301      	adds	r3, #1
 8000602:	b2d9      	uxtb	r1, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2234      	movs	r2, #52	@ 0x34
 8000608:	5499      	strb	r1, [r3, r2]
 800060a:	e001      	b.n	8000610 <ac_add_pattern+0x148>
            } else {
                 return false;
 800060c:	2300      	movs	r3, #0
 800060e:	e049      	b.n	80006a4 <ac_add_pattern+0x1dc>
            }
        }
        current_vertex = next_vertex;
 8000610:	2327      	movs	r3, #39	@ 0x27
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	221f      	movs	r2, #31
 8000616:	18ba      	adds	r2, r7, r2
 8000618:	7812      	ldrb	r2, [r2, #0]
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	e000      	b.n	8000620 <ac_add_pattern+0x158>
        if (char_idx == -1) continue; // Ignora caracteres inválidos
 800061e:	46c0      	nop			@ (mov r8, r8)
    for (int i = 0; i < pattern_len; ++i) {
 8000620:	6a3b      	ldr	r3, [r7, #32]
 8000622:	3301      	adds	r3, #1
 8000624:	623b      	str	r3, [r7, #32]
 8000626:	6a3a      	ldr	r2, [r7, #32]
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	429a      	cmp	r2, r3
 800062c:	da00      	bge.n	8000630 <ac_add_pattern+0x168>
 800062e:	e77a      	b.n	8000526 <ac_add_pattern+0x5e>
    }

    ac_vertex_t *v = &ac->vertices[current_vertex];
 8000630:	2327      	movs	r3, #39	@ 0x27
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	223a      	movs	r2, #58	@ 0x3a
 8000638:	4353      	muls	r3, r2
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	18d3      	adds	r3, r2, r3
 800063e:	617b      	str	r3, [r7, #20]
    if (v->num_patterns < AC_MAX_PATTERNS_PER_VERTEX) {
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	2237      	movs	r2, #55	@ 0x37
 8000644:	5c9b      	ldrb	r3, [r3, r2]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d82b      	bhi.n	80006a2 <ac_add_pattern+0x1da>
        v->is_output = true;
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	2236      	movs	r2, #54	@ 0x36
 800064e:	2101      	movs	r1, #1
 8000650:	5499      	strb	r1, [r3, r2]
        ac->patterns[ac->pattern_count] = pattern;
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	23b1      	movs	r3, #177	@ 0xb1
 8000656:	015b      	lsls	r3, r3, #5
 8000658:	5cd3      	ldrb	r3, [r2, r3]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	2191      	movs	r1, #145	@ 0x91
 800065e:	00c9      	lsls	r1, r1, #3
 8000660:	468c      	mov	ip, r1
 8000662:	4463      	add	r3, ip
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	18d3      	adds	r3, r2, r3
 8000668:	3304      	adds	r3, #4
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	601a      	str	r2, [r3, #0]
        v->pattern_indices[v->num_patterns++] = ac->pattern_count++;
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	23b1      	movs	r3, #177	@ 0xb1
 8000672:	015b      	lsls	r3, r3, #5
 8000674:	5cd3      	ldrb	r3, [r2, r3]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	b2d0      	uxtb	r0, r2
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	22b1      	movs	r2, #177	@ 0xb1
 800067e:	0152      	lsls	r2, r2, #5
 8000680:	5488      	strb	r0, [r1, r2]
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	2137      	movs	r1, #55	@ 0x37
 8000686:	5c52      	ldrb	r2, [r2, r1]
 8000688:	1c51      	adds	r1, r2, #1
 800068a:	b2cc      	uxtb	r4, r1
 800068c:	6979      	ldr	r1, [r7, #20]
 800068e:	2037      	movs	r0, #55	@ 0x37
 8000690:	540c      	strb	r4, [r1, r0]
 8000692:	0010      	movs	r0, r2
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	2138      	movs	r1, #56	@ 0x38
 8000698:	1812      	adds	r2, r2, r0
 800069a:	1852      	adds	r2, r2, r1
 800069c:	7013      	strb	r3, [r2, #0]
    } else {
        DEBUG_PRINTF("Warning: Maximo de padroes por vertice atingido.\n");
        return false;
    }

    return true;
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <ac_add_pattern+0x1dc>
        return false;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b00a      	add	sp, #40	@ 0x28
 80006aa:	bdb0      	pop	{r4, r5, r7, pc}

080006ac <ac_build>:

void ac_build(ac_automaton_t *ac) {
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	b089      	sub	sp, #36	@ 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    if (!ac || ac->vertex_count <= 1) return;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d100      	bne.n	80006bc <ac_build+0x10>
 80006ba:	e0aa      	b.n	8000812 <ac_build+0x166>
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	2391      	movs	r3, #145	@ 0x91
 80006c0:	015b      	lsls	r3, r3, #5
 80006c2:	5cd3      	ldrb	r3, [r2, r3]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d800      	bhi.n	80006ca <ac_build+0x1e>
 80006c8:	e0a3      	b.n	8000812 <ac_build+0x166>

    aho_queue_init(&ac->queue);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a53      	ldr	r2, [pc, #332]	@ (800081c <ac_build+0x170>)
 80006ce:	4694      	mov	ip, r2
 80006d0:	4463      	add	r3, ip
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 f9be 	bl	8000a54 <aho_queue_init>
    ac_vertex_t *root = &ac->vertices[ROOT_VERTEX];
 80006d8:	2300      	movs	r3, #0
 80006da:	001a      	movs	r2, r3
 80006dc:	233a      	movs	r3, #58	@ 0x3a
 80006de:	4353      	muls	r3, r2
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	18d3      	adds	r3, r2, r3
 80006e4:	61bb      	str	r3, [r7, #24]

    for (uint8_t i = 0; i < root->num_transitions; ++i) {
 80006e6:	231f      	movs	r3, #31
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	e023      	b.n	8000738 <ac_build+0x8c>
        uint8_t child_idx = root->transitions[i].next_vertex;
 80006f0:	251f      	movs	r5, #31
 80006f2:	197b      	adds	r3, r7, r5
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	260d      	movs	r6, #13
 80006f8:	19bb      	adds	r3, r7, r6
 80006fa:	69b9      	ldr	r1, [r7, #24]
 80006fc:	0052      	lsls	r2, r2, #1
 80006fe:	188a      	adds	r2, r1, r2
 8000700:	3201      	adds	r2, #1
 8000702:	7812      	ldrb	r2, [r2, #0]
 8000704:	701a      	strb	r2, [r3, #0]
        ac->vertices[child_idx].link = ROOT_VERTEX;
 8000706:	19bb      	adds	r3, r7, r6
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2400      	movs	r4, #0
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	2135      	movs	r1, #53	@ 0x35
 8000710:	203a      	movs	r0, #58	@ 0x3a
 8000712:	4343      	muls	r3, r0
 8000714:	18d3      	adds	r3, r2, r3
 8000716:	185b      	adds	r3, r3, r1
 8000718:	1c22      	adds	r2, r4, #0
 800071a:	701a      	strb	r2, [r3, #0]
        aho_queue_enqueue(&ac->queue, child_idx);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a3f      	ldr	r2, [pc, #252]	@ (800081c <ac_build+0x170>)
 8000720:	189a      	adds	r2, r3, r2
 8000722:	19bb      	adds	r3, r7, r6
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	0019      	movs	r1, r3
 8000728:	0010      	movs	r0, r2
 800072a:	f000 f9ab 	bl	8000a84 <aho_queue_enqueue>
    for (uint8_t i = 0; i < root->num_transitions; ++i) {
 800072e:	197b      	adds	r3, r7, r5
 8000730:	197a      	adds	r2, r7, r5
 8000732:	7812      	ldrb	r2, [r2, #0]
 8000734:	3201      	adds	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	2234      	movs	r2, #52	@ 0x34
 800073c:	5c9b      	ldrb	r3, [r3, r2]
 800073e:	221f      	movs	r2, #31
 8000740:	18ba      	adds	r2, r7, r2
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d3d3      	bcc.n	80006f0 <ac_build+0x44>
    }

    while (!aho_queue_is_empty(&ac->queue)) {
 8000748:	e054      	b.n	80007f4 <ac_build+0x148>
        uint8_t current_v_idx = aho_queue_dequeue(&ac->queue);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a33      	ldr	r2, [pc, #204]	@ (800081c <ac_build+0x170>)
 800074e:	4694      	mov	ip, r2
 8000750:	4463      	add	r3, ip
 8000752:	2517      	movs	r5, #23
 8000754:	197c      	adds	r4, r7, r5
 8000756:	0018      	movs	r0, r3
 8000758:	f000 f9c8 	bl	8000aec <aho_queue_dequeue>
 800075c:	0003      	movs	r3, r0
 800075e:	7023      	strb	r3, [r4, #0]
        ac_vertex_t *current_v = &ac->vertices[current_v_idx];
 8000760:	197b      	adds	r3, r7, r5
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	223a      	movs	r2, #58	@ 0x3a
 8000766:	4353      	muls	r3, r2
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	18d3      	adds	r3, r2, r3
 800076c:	613b      	str	r3, [r7, #16]

        for (uint8_t i = 0; i < current_v->num_transitions; ++i) {
 800076e:	231e      	movs	r3, #30
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e035      	b.n	80007e4 <ac_build+0x138>
            uint8_t char_idx = current_v->transitions[i].character;
 8000778:	251e      	movs	r5, #30
 800077a:	197b      	adds	r3, r7, r5
 800077c:	7819      	ldrb	r1, [r3, #0]
 800077e:	200f      	movs	r0, #15
 8000780:	183b      	adds	r3, r7, r0
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	0049      	lsls	r1, r1, #1
 8000786:	5c8a      	ldrb	r2, [r1, r2]
 8000788:	701a      	strb	r2, [r3, #0]
            uint8_t child_idx = current_v->transitions[i].next_vertex;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	260e      	movs	r6, #14
 8000790:	19bb      	adds	r3, r7, r6
 8000792:	6939      	ldr	r1, [r7, #16]
 8000794:	0052      	lsls	r2, r2, #1
 8000796:	188a      	adds	r2, r1, r2
 8000798:	3201      	adds	r2, #1
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	701a      	strb	r2, [r3, #0]

            ac->vertices[child_idx].link = get_next_state(ac, current_v->link, char_idx);
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	2235      	movs	r2, #53	@ 0x35
 80007a2:	5c99      	ldrb	r1, [r3, r2]
 80007a4:	19bb      	adds	r3, r7, r6
 80007a6:	781c      	ldrb	r4, [r3, #0]
 80007a8:	183b      	adds	r3, r7, r0
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 f8a8 	bl	8000904 <get_next_state>
 80007b4:	0003      	movs	r3, r0
 80007b6:	0018      	movs	r0, r3
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	2135      	movs	r1, #53	@ 0x35
 80007bc:	233a      	movs	r3, #58	@ 0x3a
 80007be:	4363      	muls	r3, r4
 80007c0:	18d3      	adds	r3, r2, r3
 80007c2:	185b      	adds	r3, r3, r1
 80007c4:	1c02      	adds	r2, r0, #0
 80007c6:	701a      	strb	r2, [r3, #0]
            aho_queue_enqueue(&ac->queue, child_idx);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a14      	ldr	r2, [pc, #80]	@ (800081c <ac_build+0x170>)
 80007cc:	189a      	adds	r2, r3, r2
 80007ce:	19bb      	adds	r3, r7, r6
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	0019      	movs	r1, r3
 80007d4:	0010      	movs	r0, r2
 80007d6:	f000 f955 	bl	8000a84 <aho_queue_enqueue>
        for (uint8_t i = 0; i < current_v->num_transitions; ++i) {
 80007da:	197b      	adds	r3, r7, r5
 80007dc:	197a      	adds	r2, r7, r5
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	3201      	adds	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	2234      	movs	r2, #52	@ 0x34
 80007e8:	5c9b      	ldrb	r3, [r3, r2]
 80007ea:	221e      	movs	r2, #30
 80007ec:	18ba      	adds	r2, r7, r2
 80007ee:	7812      	ldrb	r2, [r2, #0]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3c1      	bcc.n	8000778 <ac_build+0xcc>
    while (!aho_queue_is_empty(&ac->queue)) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a09      	ldr	r2, [pc, #36]	@ (800081c <ac_build+0x170>)
 80007f8:	4694      	mov	ip, r2
 80007fa:	4463      	add	r3, ip
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 f9a8 	bl	8000b52 <aho_queue_is_empty>
 8000802:	0003      	movs	r3, r0
 8000804:	001a      	movs	r2, r3
 8000806:	2301      	movs	r3, #1
 8000808:	4053      	eors	r3, r2
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d19c      	bne.n	800074a <ac_build+0x9e>
 8000810:	e000      	b.n	8000814 <ac_build+0x168>
    if (!ac || ac->vertex_count <= 1) return;
 8000812:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8000814:	46bd      	mov	sp, r7
 8000816:	b009      	add	sp, #36	@ 0x24
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	00001621 	.word	0x00001621

08000820 <ac_search>:

void ac_search(ac_automaton_t *ac, const char* text) {
 8000820:	b5b0      	push	{r4, r5, r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
    if (!ac || !text || ac->pattern_count == 0) return;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d03d      	beq.n	80008ac <ac_search+0x8c>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d03a      	beq.n	80008ac <ac_search+0x8c>
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	23b1      	movs	r3, #177	@ 0xb1
 800083a:	015b      	lsls	r3, r3, #5
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d034      	beq.n	80008ac <ac_search+0x8c>

    uint8_t current_state = ROOT_VERTEX;
 8000842:	2317      	movs	r3, #23
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
    for (int i = 0; text[i] != '\0'; ++i) {
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	e026      	b.n	800089e <ac_search+0x7e>
        int char_idx = char_to_index(text[i]);
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff fddd 	bl	8000418 <char_to_index>
 800085e:	0003      	movs	r3, r0
 8000860:	60fb      	str	r3, [r7, #12]
        if (char_idx == -1) {
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3301      	adds	r3, #1
 8000866:	d104      	bne.n	8000872 <ac_search+0x52>
            current_state = ROOT_VERTEX;
 8000868:	2317      	movs	r3, #23
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
            continue;
 8000870:	e012      	b.n	8000898 <ac_search+0x78>
        }

        current_state = get_next_state(ac, current_state, (uint8_t)char_idx);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	2517      	movs	r5, #23
 8000878:	197c      	adds	r4, r7, r5
 800087a:	197b      	adds	r3, r7, r5
 800087c:	7819      	ldrb	r1, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	0018      	movs	r0, r3
 8000882:	f000 f83f 	bl	8000904 <get_next_state>
 8000886:	0003      	movs	r3, r0
 8000888:	7023      	strb	r3, [r4, #0]
        report_matches(ac, current_state, i);
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	197b      	adds	r3, r7, r5
 800088e:	7819      	ldrb	r1, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	0018      	movs	r0, r3
 8000894:	f000 f870 	bl	8000978 <report_matches>
    for (int i = 0; text[i] != '\0'; ++i) {
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	3301      	adds	r3, #1
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	18d3      	adds	r3, r2, r3
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1d2      	bne.n	8000850 <ac_search+0x30>
 80008aa:	e000      	b.n	80008ae <ac_search+0x8e>
    if (!ac || !text || ac->pattern_count == 0) return;
 80008ac:	46c0      	nop			@ (mov r8, r8)
    }
}
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b006      	add	sp, #24
 80008b2:	bdb0      	pop	{r4, r5, r7, pc}

080008b4 <find_transition>:

static uint8_t find_transition(const ac_vertex_t *v, uint8_t char_idx) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	000a      	movs	r2, r1
 80008be:	1cfb      	adds	r3, r7, #3
 80008c0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < v->num_transitions; ++i) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	e011      	b.n	80008ec <find_transition+0x38>
        if (v->transitions[i].character == char_idx) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	0052      	lsls	r2, r2, #1
 80008ce:	5cd3      	ldrb	r3, [r2, r3]
 80008d0:	1cfa      	adds	r2, r7, #3
 80008d2:	7812      	ldrb	r2, [r2, #0]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d106      	bne.n	80008e6 <find_transition+0x32>
            return v->transitions[i].next_vertex;
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	18d3      	adds	r3, r2, r3
 80008e0:	3301      	adds	r3, #1
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	e00a      	b.n	80008fc <find_transition+0x48>
    for (int i = 0; i < v->num_transitions; ++i) {
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2234      	movs	r2, #52	@ 0x34
 80008f0:	5c9b      	ldrb	r3, [r3, r2]
 80008f2:	001a      	movs	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4293      	cmp	r3, r2
 80008f8:	dbe6      	blt.n	80008c8 <find_transition+0x14>
        }
    }
    return INVALID_VERTEX_U8;
 80008fa:	23ff      	movs	r3, #255	@ 0xff
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b004      	add	sp, #16
 8000902:	bd80      	pop	{r7, pc}

08000904 <get_next_state>:

static uint8_t get_next_state(ac_automaton_t *ac, uint8_t current_state, uint8_t char_idx) {
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	0008      	movs	r0, r1
 800090e:	0011      	movs	r1, r2
 8000910:	1cfb      	adds	r3, r7, #3
 8000912:	1c02      	adds	r2, r0, #0
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	1cbb      	adds	r3, r7, #2
 8000918:	1c0a      	adds	r2, r1, #0
 800091a:	701a      	strb	r2, [r3, #0]
    while (true) {
        uint8_t next = find_transition(&ac->vertices[current_state], char_idx);
 800091c:	1cfb      	adds	r3, r7, #3
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	223a      	movs	r2, #58	@ 0x3a
 8000922:	4353      	muls	r3, r2
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	18d2      	adds	r2, r2, r3
 8000928:	250f      	movs	r5, #15
 800092a:	197c      	adds	r4, r7, r5
 800092c:	1cbb      	adds	r3, r7, #2
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	0019      	movs	r1, r3
 8000932:	0010      	movs	r0, r2
 8000934:	f7ff ffbe 	bl	80008b4 <find_transition>
 8000938:	0003      	movs	r3, r0
 800093a:	7023      	strb	r3, [r4, #0]
        if (next != INVALID_VERTEX_U8) {
 800093c:	197b      	adds	r3, r7, r5
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2bff      	cmp	r3, #255	@ 0xff
 8000942:	d002      	beq.n	800094a <get_next_state+0x46>
            return next;
 8000944:	197b      	adds	r3, r7, r5
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	e012      	b.n	8000970 <get_next_state+0x6c>
        }
        if (current_state == ROOT_VERTEX) {
 800094a:	2200      	movs	r2, #0
 800094c:	1cfb      	adds	r3, r7, #3
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4293      	cmp	r3, r2
 8000952:	d101      	bne.n	8000958 <get_next_state+0x54>
            return ROOT_VERTEX;
 8000954:	2300      	movs	r3, #0
 8000956:	e00b      	b.n	8000970 <get_next_state+0x6c>
        }
        current_state = ac->vertices[current_state].link;
 8000958:	1cfb      	adds	r3, r7, #3
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	1cfb      	adds	r3, r7, #3
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	2035      	movs	r0, #53	@ 0x35
 8000962:	243a      	movs	r4, #58	@ 0x3a
 8000964:	4362      	muls	r2, r4
 8000966:	188a      	adds	r2, r1, r2
 8000968:	1812      	adds	r2, r2, r0
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	701a      	strb	r2, [r3, #0]
    while (true) {
 800096e:	e7d5      	b.n	800091c <get_next_state+0x18>
    }
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b004      	add	sp, #16
 8000976:	bdb0      	pop	{r4, r5, r7, pc}

08000978 <report_matches>:

static void report_matches(ac_automaton_t *ac, uint8_t state, int text_pos) {
 8000978:	b5b0      	push	{r4, r5, r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	200b      	movs	r0, #11
 8000984:	183b      	adds	r3, r7, r0
 8000986:	1c0a      	adds	r2, r1, #0
 8000988:	701a      	strb	r2, [r3, #0]
    if (!ac->match_callback) return;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	4a30      	ldr	r2, [pc, #192]	@ (8000a50 <report_matches+0xd8>)
 800098e:	589b      	ldr	r3, [r3, r2]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d059      	beq.n	8000a48 <report_matches+0xd0>

    uint8_t current_state = state;
 8000994:	231f      	movs	r3, #31
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	183a      	adds	r2, r7, r0
 800099a:	7812      	ldrb	r2, [r2, #0]
 800099c:	701a      	strb	r2, [r3, #0]
    while (current_state != ROOT_VERTEX) {
 800099e:	e04c      	b.n	8000a3a <report_matches+0xc2>
        if (ac->vertices[current_state].is_output) {
 80009a0:	241f      	movs	r4, #31
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	2136      	movs	r1, #54	@ 0x36
 80009aa:	203a      	movs	r0, #58	@ 0x3a
 80009ac:	4343      	muls	r3, r0
 80009ae:	18d3      	adds	r3, r2, r3
 80009b0:	185b      	adds	r3, r3, r1
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d034      	beq.n	8000a22 <report_matches+0xaa>
            ac_vertex_t *v = &ac->vertices[current_state];
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	223a      	movs	r2, #58	@ 0x3a
 80009be:	4353      	muls	r3, r2
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	18d3      	adds	r3, r2, r3
 80009c4:	61bb      	str	r3, [r7, #24]
            for (uint8_t i = 0; i < v->num_patterns; ++i) {
 80009c6:	231e      	movs	r3, #30
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	e020      	b.n	8000a12 <report_matches+0x9a>
                uint8_t pattern_idx = v->pattern_indices[i];
 80009d0:	241e      	movs	r4, #30
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	2517      	movs	r5, #23
 80009d8:	197b      	adds	r3, r7, r5
 80009da:	69b9      	ldr	r1, [r7, #24]
 80009dc:	2038      	movs	r0, #56	@ 0x38
 80009de:	188a      	adds	r2, r1, r2
 80009e0:	1812      	adds	r2, r2, r0
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	701a      	strb	r2, [r3, #0]
                ac->match_callback(ac->patterns[pattern_idx], text_pos);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4a19      	ldr	r2, [pc, #100]	@ (8000a50 <report_matches+0xd8>)
 80009ea:	589a      	ldr	r2, [r3, r2]
 80009ec:	197b      	adds	r3, r7, r5
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	68f9      	ldr	r1, [r7, #12]
 80009f2:	2091      	movs	r0, #145	@ 0x91
 80009f4:	00c0      	lsls	r0, r0, #3
 80009f6:	4684      	mov	ip, r0
 80009f8:	4463      	add	r3, ip
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	18cb      	adds	r3, r1, r3
 80009fe:	3304      	adds	r3, #4
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	0018      	movs	r0, r3
 8000a06:	4790      	blx	r2
            for (uint8_t i = 0; i < v->num_patterns; ++i) {
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	193a      	adds	r2, r7, r4
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	3201      	adds	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	2237      	movs	r2, #55	@ 0x37
 8000a16:	5c9b      	ldrb	r3, [r3, r2]
 8000a18:	221e      	movs	r2, #30
 8000a1a:	18ba      	adds	r2, r7, r2
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d3d6      	bcc.n	80009d0 <report_matches+0x58>
            }
        }
        current_state = ac->vertices[current_state].link;
 8000a22:	211f      	movs	r1, #31
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	781a      	ldrb	r2, [r3, #0]
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	68f9      	ldr	r1, [r7, #12]
 8000a2c:	2035      	movs	r0, #53	@ 0x35
 8000a2e:	243a      	movs	r4, #58	@ 0x3a
 8000a30:	4362      	muls	r2, r4
 8000a32:	188a      	adds	r2, r1, r2
 8000a34:	1812      	adds	r2, r2, r0
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	701a      	strb	r2, [r3, #0]
    while (current_state != ROOT_VERTEX) {
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	231f      	movs	r3, #31
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d1ac      	bne.n	80009a0 <report_matches+0x28>
 8000a46:	e000      	b.n	8000a4a <report_matches+0xd2>
    if (!ac->match_callback) return;
 8000a48:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b008      	add	sp, #32
 8000a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a50:	00001674 	.word	0x00001674

08000a54 <aho_queue_init>:
#include "aho_queue.h"
#include <stdio.h>

void aho_queue_init(aho_queue_t *q) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    if (!q) return;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00c      	beq.n	8000a7c <aho_queue_init+0x28>
    q->head = 0;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2250      	movs	r2, #80	@ 0x50
 8000a66:	2100      	movs	r1, #0
 8000a68:	5499      	strb	r1, [r3, r2]
    q->tail = 0;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2251      	movs	r2, #81	@ 0x51
 8000a6e:	2100      	movs	r1, #0
 8000a70:	5499      	strb	r1, [r3, r2]
    q->count = 0;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2252      	movs	r2, #82	@ 0x52
 8000a76:	2100      	movs	r1, #0
 8000a78:	5499      	strb	r1, [r3, r2]
 8000a7a:	e000      	b.n	8000a7e <aho_queue_init+0x2a>
    if (!q) return;
 8000a7c:	46c0      	nop			@ (mov r8, r8)
}
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <aho_queue_enqueue>:

bool aho_queue_enqueue(aho_queue_t *q, uint8_t vertex_idx) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	000a      	movs	r2, r1
 8000a8e:	1cfb      	adds	r3, r7, #3
 8000a90:	701a      	strb	r2, [r3, #0]
    if (!q || aho_queue_is_full(q)) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d005      	beq.n	8000aa4 <aho_queue_enqueue+0x20>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 f870 	bl	8000b80 <aho_queue_is_full>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <aho_queue_enqueue+0x24>
        DEBUG_PRINTF("Erro: Fila cheia. Falha ao enfileirar vertice %u\n", vertex_idx);
        return false;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e01d      	b.n	8000ae4 <aho_queue_enqueue+0x60>
    }
    q->buffer[q->tail] = vertex_idx;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2251      	movs	r2, #81	@ 0x51
 8000aac:	5c9b      	ldrb	r3, [r3, r2]
 8000aae:	0019      	movs	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	1cfa      	adds	r2, r7, #3
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	545a      	strb	r2, [r3, r1]
    q->tail = (q->tail + 1) % AC_MAX_VERTICES;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2251      	movs	r2, #81	@ 0x51
 8000abc:	5c9b      	ldrb	r3, [r3, r2]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	2150      	movs	r1, #80	@ 0x50
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fca2 	bl	800040c <__aeabi_idivmod>
 8000ac8:	000b      	movs	r3, r1
 8000aca:	b2d9      	uxtb	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2251      	movs	r2, #81	@ 0x51
 8000ad0:	5499      	strb	r1, [r3, r2]
    q->count++;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2252      	movs	r2, #82	@ 0x52
 8000ad6:	5c9b      	ldrb	r3, [r3, r2]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b2d9      	uxtb	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2252      	movs	r2, #82	@ 0x52
 8000ae0:	5499      	strb	r1, [r3, r2]
    return true;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}

08000aec <aho_queue_dequeue>:

uint8_t aho_queue_dequeue(aho_queue_t *q) {
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    if (!q || aho_queue_is_empty(q)) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d005      	beq.n	8000b06 <aho_queue_dequeue+0x1a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 f828 	bl	8000b52 <aho_queue_is_empty>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <aho_queue_dequeue+0x1e>
        DEBUG_PRINTF("Erro: Fila vazia. Falha ao desenfileirar.\n");
        return INVALID_VERTEX_U8;
 8000b06:	23ff      	movs	r3, #255	@ 0xff
 8000b08:	e01f      	b.n	8000b4a <aho_queue_dequeue+0x5e>
    }
    uint8_t vertex_idx = q->buffer[q->head];
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2250      	movs	r2, #80	@ 0x50
 8000b0e:	5c9b      	ldrb	r3, [r3, r2]
 8000b10:	0019      	movs	r1, r3
 8000b12:	240f      	movs	r4, #15
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	5c52      	ldrb	r2, [r2, r1]
 8000b1a:	701a      	strb	r2, [r3, #0]
    q->head = (q->head + 1) % AC_MAX_VERTICES;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2250      	movs	r2, #80	@ 0x50
 8000b20:	5c9b      	ldrb	r3, [r3, r2]
 8000b22:	3301      	adds	r3, #1
 8000b24:	2150      	movs	r1, #80	@ 0x50
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fc70 	bl	800040c <__aeabi_idivmod>
 8000b2c:	000b      	movs	r3, r1
 8000b2e:	b2d9      	uxtb	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2250      	movs	r2, #80	@ 0x50
 8000b34:	5499      	strb	r1, [r3, r2]
    q->count--;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2252      	movs	r2, #82	@ 0x52
 8000b3a:	5c9b      	ldrb	r3, [r3, r2]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	b2d9      	uxtb	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2252      	movs	r2, #82	@ 0x52
 8000b44:	5499      	strb	r1, [r3, r2]
    return vertex_idx;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	781b      	ldrb	r3, [r3, #0]
}
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b005      	add	sp, #20
 8000b50:	bd90      	pop	{r4, r7, pc}

08000b52 <aho_queue_is_empty>:

bool aho_queue_is_empty(const aho_queue_t *q) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
    return q ? (q->count == 0) : true;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <aho_queue_is_empty+0x18>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2252      	movs	r2, #82	@ 0x52
 8000b64:	5c9b      	ldrb	r3, [r3, r2]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <aho_queue_is_empty+0x1c>
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e000      	b.n	8000b70 <aho_queue_is_empty+0x1e>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	1c1a      	adds	r2, r3, #0
 8000b72:	2301      	movs	r3, #1
 8000b74:	4013      	ands	r3, r2
 8000b76:	b2db      	uxtb	r3, r3
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b002      	add	sp, #8
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <aho_queue_is_full>:

bool aho_queue_is_full(const aho_queue_t *q) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    return q ? (q->count == AC_MAX_VERTICES) : true;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <aho_queue_is_full+0x18>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2252      	movs	r2, #82	@ 0x52
 8000b92:	5c9b      	ldrb	r3, [r3, r2]
 8000b94:	2b50      	cmp	r3, #80	@ 0x50
 8000b96:	d101      	bne.n	8000b9c <aho_queue_is_full+0x1c>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <aho_queue_is_full+0x1e>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	1c1a      	adds	r2, r3, #0
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	b2db      	uxtb	r3, r3
}
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b002      	add	sp, #8
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <UART_Transmit_String>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

// Função auxiliar para enviar strings via UART
void UART_Transmit_String(const char* str) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), UART_TX_TIMEOUT);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff faa4 	bl	8000108 <strlen>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <UART_Transmit_String+0x28>)
 8000bc8:	2364      	movs	r3, #100	@ 0x64
 8000bca:	f001 fa45 	bl	8002058 <HAL_UART_Transmit>
}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	200000d8 	.word	0x200000d8

08000bdc <on_spam_match_found>:

// Callback chamado quando uma palavra-chave de SPAM é encontrada
void on_spam_match_found(const char* pattern, int position)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b0a5      	sub	sp, #148	@ 0x94
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    char buffer[128];
    int len = snprintf(buffer, sizeof(buffer), "    [!] Palavra de SPAM encontrada: '%s'\r\n", pattern);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <on_spam_match_found+0x40>)
 8000bea:	240c      	movs	r4, #12
 8000bec:	1938      	adds	r0, r7, r4
 8000bee:	2180      	movs	r1, #128	@ 0x80
 8000bf0:	f001 fe42 	bl	8002878 <sniprintf>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	228c      	movs	r2, #140	@ 0x8c
 8000bf8:	18b9      	adds	r1, r7, r2
 8000bfa:	600b      	str	r3, [r1, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, UART_TX_TIMEOUT);
 8000bfc:	18bb      	adds	r3, r7, r2
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	1939      	adds	r1, r7, r4
 8000c04:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <on_spam_match_found+0x44>)
 8000c06:	2364      	movs	r3, #100	@ 0x64
 8000c08:	f001 fa26 	bl	8002058 <HAL_UART_Transmit>

    // Marca o e-mail atual como SPAM
    g_spam_found_in_current_email = true;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <on_spam_match_found+0x48>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]

    // Pisca o LED para indicar uma detecção
//    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//    HAL_Delay(50);
//    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b025      	add	sp, #148	@ 0x94
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	08003458 	.word	0x08003458
 8000c20:	200000d8 	.word	0x200000d8
 8000c24:	200017d8 	.word	0x200017d8

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b0c7      	sub	sp, #284	@ 0x11c
 8000c2c:	af02      	add	r7, sp, #8
  /* --- 1. INICIALIZAÇÃO DO HARDWARE E DO AUTÔMATO (EXECUTADO UMA VEZ) --- */
  HAL_Init();
 8000c2e:	f000 fab5 	bl	800119c <HAL_Init>
  SystemClock_Config();
 8000c32:	f000 f8ed 	bl	8000e10 <SystemClock_Config>
  MX_GPIO_Init();
 8000c36:	f000 f965 	bl	8000f04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c3a:	f000 f933 	bl	8000ea4 <MX_USART2_UART_Init>

  // Uma pequena pausa para garantir que o terminal serial esteja pronto
  HAL_Delay(100);
 8000c3e:	2064      	movs	r0, #100	@ 0x64
 8000c40:	f000 fb10 	bl	8001264 <HAL_Delay>

  // Substituindo printf por UART_Transmit_String ou snprintf + HAL_UART_Transmit
  UART_Transmit_String("--- Filtro de SPAM Aho-Corasick STM32 ---\r\n");
 8000c44:	4b60      	ldr	r3, [pc, #384]	@ (8000dc8 <main+0x1a0>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff ffb2 	bl	8000bb0 <UART_Transmit_String>
  UART_Transmit_String("Inicializando e construindo base de dados de SPAM...\r\n\r\n");
 8000c4c:	4b5f      	ldr	r3, [pc, #380]	@ (8000dcc <main+0x1a4>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff ffae 	bl	8000bb0 <UART_Transmit_String>

  // Inicializa o autômato com o novo callback
  ac_init(&ac_spam_filter, on_spam_match_found);
 8000c54:	4a5e      	ldr	r2, [pc, #376]	@ (8000dd0 <main+0x1a8>)
 8000c56:	4b5f      	ldr	r3, [pc, #380]	@ (8000dd4 <main+0x1ac>)
 8000c58:	0011      	movs	r1, r2
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fc00 	bl	8000460 <ac_init>

  // Adiciona as palavras-chave de SPAM ao autômato
  for (int i = 0; i < NUM_SPAM_KEYWORDS; ++i) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	2286      	movs	r2, #134	@ 0x86
 8000c64:	0052      	lsls	r2, r2, #1
 8000c66:	18ba      	adds	r2, r7, r2
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e010      	b.n	8000c8e <main+0x66>
    ac_add_pattern(&ac_spam_filter, spam_keywords[i]);
 8000c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd8 <main+0x1b0>)
 8000c6e:	2486      	movs	r4, #134	@ 0x86
 8000c70:	0064      	lsls	r4, r4, #1
 8000c72:	193a      	adds	r2, r7, r4
 8000c74:	6812      	ldr	r2, [r2, #0]
 8000c76:	0092      	lsls	r2, r2, #2
 8000c78:	58d2      	ldr	r2, [r2, r3]
 8000c7a:	4b56      	ldr	r3, [pc, #344]	@ (8000dd4 <main+0x1ac>)
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fc22 	bl	80004c8 <ac_add_pattern>
  for (int i = 0; i < NUM_SPAM_KEYWORDS; ++i) {
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	193a      	adds	r2, r7, r4
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	2386      	movs	r3, #134	@ 0x86
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b0b      	cmp	r3, #11
 8000c98:	dde8      	ble.n	8000c6c <main+0x44>
  }

  // Constrói a máquina de estados Aho-Corasick. Agora ela está pronta.
  ac_build(&ac_spam_filter);
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd4 <main+0x1ac>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fd05 	bl	80006ac <ac_build>
  UART_Transmit_String("Filtro pronto para analisar e-mails.\r\n");
 8000ca2:	4b4e      	ldr	r3, [pc, #312]	@ (8000ddc <main+0x1b4>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ff83 	bl	8000bb0 <UART_Transmit_String>
  UART_Transmit_String("----------------------------------------\r\n\r\n");
 8000caa:	4b4d      	ldr	r3, [pc, #308]	@ (8000de0 <main+0x1b8>)
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ff7f 	bl	8000bb0 <UART_Transmit_String>

  // Itera sobre a lista de e-mails, simulando a chegada de novas mensagens
  while(1) {
	  for (int i = 0; i < NUM_EMAILS; ++i) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2284      	movs	r2, #132	@ 0x84
 8000cb6:	0052      	lsls	r2, r2, #1
 8000cb8:	18ba      	adds	r2, r7, r2
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	e06c      	b.n	8000d98 <main+0x170>
		  const Email* current_email = &email_inbox[i];
 8000cbe:	2184      	movs	r1, #132	@ 0x84
 8000cc0:	0049      	lsls	r1, r1, #1
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	0013      	movs	r3, r2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	189b      	adds	r3, r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4a45      	ldr	r2, [pc, #276]	@ (8000de4 <main+0x1bc>)
 8000cd0:	189b      	adds	r3, r3, r2
 8000cd2:	1d7a      	adds	r2, r7, #5
 8000cd4:	32ff      	adds	r2, #255	@ 0xff
 8000cd6:	6013      	str	r3, [r2, #0]
		  char buffer[256];
		  int len;

		  len = snprintf(buffer, sizeof(buffer), "Analisando E-mail %d de '%s'...\r\n", i + 1, current_email->from);
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	1c5c      	adds	r4, r3, #1
 8000cde:	1d7b      	adds	r3, r7, #5
 8000ce0:	33ff      	adds	r3, #255	@ 0xff
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a40      	ldr	r2, [pc, #256]	@ (8000de8 <main+0x1c0>)
 8000ce8:	2180      	movs	r1, #128	@ 0x80
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	0038      	movs	r0, r7
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	0023      	movs	r3, r4
 8000cf2:	f001 fdc1 	bl	8002878 <sniprintf>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	1c7a      	adds	r2, r7, #1
 8000cfa:	32ff      	adds	r2, #255	@ 0xff
 8000cfc:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, UART_TX_TIMEOUT);
 8000cfe:	1c7b      	adds	r3, r7, #1
 8000d00:	33ff      	adds	r3, #255	@ 0xff
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	0039      	movs	r1, r7
 8000d08:	4838      	ldr	r0, [pc, #224]	@ (8000dec <main+0x1c4>)
 8000d0a:	2364      	movs	r3, #100	@ 0x64
 8000d0c:	f001 f9a4 	bl	8002058 <HAL_UART_Transmit>

		  len = snprintf(buffer, sizeof(buffer), "  Assunto: %s\r\n", current_email->subject);
 8000d10:	1d7b      	adds	r3, r7, #5
 8000d12:	33ff      	adds	r3, #255	@ 0xff
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	4a35      	ldr	r2, [pc, #212]	@ (8000df0 <main+0x1c8>)
 8000d1a:	2180      	movs	r1, #128	@ 0x80
 8000d1c:	0049      	lsls	r1, r1, #1
 8000d1e:	0038      	movs	r0, r7
 8000d20:	f001 fdaa 	bl	8002878 <sniprintf>
 8000d24:	0003      	movs	r3, r0
 8000d26:	1c7a      	adds	r2, r7, #1
 8000d28:	32ff      	adds	r2, #255	@ 0xff
 8000d2a:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, UART_TX_TIMEOUT);
 8000d2c:	1c7b      	adds	r3, r7, #1
 8000d2e:	33ff      	adds	r3, #255	@ 0xff
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	0039      	movs	r1, r7
 8000d36:	482d      	ldr	r0, [pc, #180]	@ (8000dec <main+0x1c4>)
 8000d38:	2364      	movs	r3, #100	@ 0x64
 8000d3a:	f001 f98d 	bl	8002058 <HAL_UART_Transmit>

		  // Reseta o status de SPAM para o e-mail atual
		  g_spam_found_in_current_email = false;
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <main+0x1cc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]

		  // Executa a busca no assunto e no corpo do e-mail
		  ac_search(&ac_spam_filter, current_email->subject);
 8000d44:	1d7b      	adds	r3, r7, #5
 8000d46:	33ff      	adds	r3, #255	@ 0xff
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <main+0x1ac>)
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fd65 	bl	8000820 <ac_search>
		  ac_search(&ac_spam_filter, current_email->body);
 8000d56:	1d7b      	adds	r3, r7, #5
 8000d58:	33ff      	adds	r3, #255	@ 0xff
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <main+0x1ac>)
 8000d60:	0011      	movs	r1, r2
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff fd5c 	bl	8000820 <ac_search>

		  // Apresenta o veredito final para o e-mail
		  if (g_spam_found_in_current_email) {
 8000d68:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <main+0x1cc>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d004      	beq.n	8000d7a <main+0x152>
			  UART_Transmit_String("  VEREDITO: E-mail classificado como SPAM.\r\n\r\n");
 8000d70:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <main+0x1d0>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff ff1c 	bl	8000bb0 <UART_Transmit_String>
 8000d78:	e003      	b.n	8000d82 <main+0x15a>
		  } else {
			  UART_Transmit_String("  VEREDITO: E-mail legitimo.\r\n\r\n");
 8000d7a:	4b20      	ldr	r3, [pc, #128]	@ (8000dfc <main+0x1d4>)
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ff17 	bl	8000bb0 <UART_Transmit_String>
		  }

		  HAL_Delay(5000);
 8000d82:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <main+0x1d8>)
 8000d84:	0018      	movs	r0, r3
 8000d86:	f000 fa6d 	bl	8001264 <HAL_Delay>
	  for (int i = 0; i < NUM_EMAILS; ++i) {
 8000d8a:	2284      	movs	r2, #132	@ 0x84
 8000d8c:	0052      	lsls	r2, r2, #1
 8000d8e:	18bb      	adds	r3, r7, r2
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	18ba      	adds	r2, r7, r2
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	2384      	movs	r3, #132	@ 0x84
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	dd8c      	ble.n	8000cbe <main+0x96>
	  }

	  UART_Transmit_String("----------------------------------------\r\n");
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <main+0x1dc>)
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff ff02 	bl	8000bb0 <UART_Transmit_String>
	  UART_Transmit_String("Todos os e-mails foram analisados. Reiniciando a demonstracao em 10s...\r\n");
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <main+0x1e0>)
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fefe 	bl	8000bb0 <UART_Transmit_String>
	  UART_Transmit_String("----------------------------------------\r\n\r\n");
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <main+0x1b8>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff fefa 	bl	8000bb0 <UART_Transmit_String>
	  HAL_Delay(10000);
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <main+0x1e4>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fa50 	bl	8001264 <HAL_Delay>
	  for (int i = 0; i < NUM_EMAILS; ++i) {
 8000dc4:	e775      	b.n	8000cb2 <main+0x8a>
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	08003484 	.word	0x08003484
 8000dcc:	080034b0 	.word	0x080034b0
 8000dd0:	08000bdd 	.word	0x08000bdd
 8000dd4:	20000160 	.word	0x20000160
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	080034ec 	.word	0x080034ec
 8000de0:	08003514 	.word	0x08003514
 8000de4:	20000030 	.word	0x20000030
 8000de8:	08003544 	.word	0x08003544
 8000dec:	200000d8 	.word	0x200000d8
 8000df0:	08003568 	.word	0x08003568
 8000df4:	200017d8 	.word	0x200017d8
 8000df8:	08003578 	.word	0x08003578
 8000dfc:	080035a8 	.word	0x080035a8
 8000e00:	00001388 	.word	0x00001388
 8000e04:	080035cc 	.word	0x080035cc
 8000e08:	080035f8 	.word	0x080035f8
 8000e0c:	00002710 	.word	0x00002710

08000e10 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b091      	sub	sp, #68	@ 0x44
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	2410      	movs	r4, #16
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	2330      	movs	r3, #48	@ 0x30
 8000e1e:	001a      	movs	r2, r3
 8000e20:	2100      	movs	r1, #0
 8000e22:	f001 fd5f 	bl	80028e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e26:	003b      	movs	r3, r7
 8000e28:	0018      	movs	r0, r3
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f001 fd58 	bl	80028e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e34:	0021      	movs	r1, r4
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2202      	movs	r2, #2
 8000e3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2201      	movs	r2, #1
 8000e40:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2210      	movs	r2, #16
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	22a0      	movs	r2, #160	@ 0xa0
 8000e58:	0392      	lsls	r2, r2, #14
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 fc45 	bl	80016f4 <HAL_RCC_OscConfig>
 8000e6a:	1e03      	subs	r3, r0, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e6e:	f000 f89f 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f000 ff4a 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e98:	f000 f88a 	bl	8000fb0 <Error_Handler>
  }
}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b011      	add	sp, #68	@ 0x44
 8000ea2:	bd90      	pop	{r4, r7, pc}

08000ea4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000eaa:	4a15      	ldr	r2, [pc, #84]	@ (8000f00 <MX_USART2_UART_Init+0x5c>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000eb0:	2296      	movs	r2, #150	@ 0x96
 8000eb2:	0212      	lsls	r2, r2, #8
 8000eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <MX_USART2_UART_Init+0x58>)
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f001 f861 	bl	8001fb0 <HAL_UART_Init>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ef2:	f000 f85d 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000d8 	.word	0x200000d8
 8000f00:	40004400 	.word	0x40004400

08000f04 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	240c      	movs	r4, #12
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	0018      	movs	r0, r3
 8000f10:	2314      	movs	r3, #20
 8000f12:	001a      	movs	r2, r3
 8000f14:	2100      	movs	r1, #0
 8000f16:	f001 fce5 	bl	80028e4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	4b24      	ldr	r3, [pc, #144]	@ (8000fac <MX_GPIO_Init+0xa8>)
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <MX_GPIO_Init+0xa8>)
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	0309      	lsls	r1, r1, #12
 8000f24:	430a      	orrs	r2, r1
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <MX_GPIO_Init+0xa8>)
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	031b      	lsls	r3, r3, #12
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_GPIO_Init+0xa8>)
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <MX_GPIO_Init+0xa8>)
 8000f3c:	2180      	movs	r1, #128	@ 0x80
 8000f3e:	03c9      	lsls	r1, r1, #15
 8000f40:	430a      	orrs	r2, r1
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_GPIO_Init+0xa8>)
 8000f46:	695a      	ldr	r2, [r3, #20]
 8000f48:	2380      	movs	r3, #128	@ 0x80
 8000f4a:	03db      	lsls	r3, r3, #15
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <MX_GPIO_Init+0xa8>)
 8000f54:	695a      	ldr	r2, [r3, #20]
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <MX_GPIO_Init+0xa8>)
 8000f58:	2180      	movs	r1, #128	@ 0x80
 8000f5a:	0289      	lsls	r1, r1, #10
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	615a      	str	r2, [r3, #20]
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_GPIO_Init+0xa8>)
 8000f62:	695a      	ldr	r2, [r3, #20]
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	2284      	movs	r2, #132	@ 0x84
 8000f78:	0392      	lsls	r2, r2, #14
 8000f7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f82:	193a      	adds	r2, r7, r4
 8000f84:	2390      	movs	r3, #144	@ 0x90
 8000f86:	05db      	lsls	r3, r3, #23
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 fa42 	bl	8001414 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Configure GPIO pin : LD2_Pin */
//  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	2201      	movs	r2, #1
 8000f94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b009      	add	sp, #36	@ 0x24
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	40021000 	.word	0x40021000

08000fb0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	e7fd      	b.n	8000fb8 <Error_Handler+0x8>

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <HAL_MspInit+0x44>)
 8000fc4:	699a      	ldr	r2, [r3, #24]
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_MspInit+0x44>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	619a      	str	r2, [r3, #24]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_MspInit+0x44>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <HAL_MspInit+0x44>)
 8000fdc:	69da      	ldr	r2, [r3, #28]
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <HAL_MspInit+0x44>)
 8000fe0:	2180      	movs	r1, #128	@ 0x80
 8000fe2:	0549      	lsls	r1, r1, #21
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	61da      	str	r2, [r3, #28]
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <HAL_MspInit+0x44>)
 8000fea:	69da      	ldr	r2, [r3, #28]
 8000fec:	2380      	movs	r3, #128	@ 0x80
 8000fee:	055b      	lsls	r3, r3, #21
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b08b      	sub	sp, #44	@ 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	2414      	movs	r4, #20
 800100e:	193b      	adds	r3, r7, r4
 8001010:	0018      	movs	r0, r3
 8001012:	2314      	movs	r3, #20
 8001014:	001a      	movs	r2, r3
 8001016:	2100      	movs	r1, #0
 8001018:	f001 fc64 	bl	80028e4 <memset>
  if(huart->Instance==USART2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1c      	ldr	r2, [pc, #112]	@ (8001094 <HAL_UART_MspInit+0x90>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d132      	bne.n	800108c <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <HAL_UART_MspInit+0x94>)
 8001028:	69da      	ldr	r2, [r3, #28]
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <HAL_UART_MspInit+0x94>)
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	0289      	lsls	r1, r1, #10
 8001030:	430a      	orrs	r2, r1
 8001032:	61da      	str	r2, [r3, #28]
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_UART_MspInit+0x94>)
 8001036:	69da      	ldr	r2, [r3, #28]
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	029b      	lsls	r3, r3, #10
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_UART_MspInit+0x94>)
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <HAL_UART_MspInit+0x94>)
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	0289      	lsls	r1, r1, #10
 800104c:	430a      	orrs	r2, r1
 800104e:	615a      	str	r2, [r3, #20]
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_UART_MspInit+0x94>)
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	029b      	lsls	r3, r3, #10
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105e:	0021      	movs	r1, r4
 8001060:	187b      	adds	r3, r7, r1
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2202      	movs	r2, #2
 800106a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2203      	movs	r2, #3
 8001076:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2201      	movs	r2, #1
 800107c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	187a      	adds	r2, r7, r1
 8001080:	2390      	movs	r3, #144	@ 0x90
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	0011      	movs	r1, r2
 8001086:	0018      	movs	r0, r3
 8001088:	f000 f9c4 	bl	8001414 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b00b      	add	sp, #44	@ 0x2c
 8001092:	bd90      	pop	{r4, r7, pc}
 8001094:	40004400 	.word	0x40004400
 8001098:	40021000 	.word	0x40021000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	e7fd      	b.n	80010a0 <NMI_Handler+0x4>

080010a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	e7fd      	b.n	80010a8 <HardFault_Handler+0x4>

080010ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 f8b2 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	18d3      	adds	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f001 fbf8 	bl	80028f4 <__errno>
 8001104:	0003      	movs	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	2301      	movs	r3, #1
 800110c:	425b      	negs	r3, r3
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	18d2      	adds	r2, r2, r3
 800111e:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <_sbrk+0x64>)
 8001120:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b006      	add	sp, #24
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20002000 	.word	0x20002000
 8001130:	00000400 	.word	0x00000400
 8001134:	200017dc 	.word	0x200017dc
 8001138:	20001930 	.word	0x20001930

0800113c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001148:	480d      	ldr	r0, [pc, #52]	@ (8001180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800114c:	f7ff fff6 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	@ (8001184 <LoopForever+0x6>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	@ (8001188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <LoopForever+0xe>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	@ (8001194 <LoopForever+0x16>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001176:	f001 fbc3 	bl	8002900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117a:	f7ff fd55 	bl	8000c28 <main>

0800117e <LoopForever>:

LoopForever:
    b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   r0, =_estack
 8001180:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 800118c:	080036b8 	.word	0x080036b8
  ldr r2, =_sbss
 8001190:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001194:	2000192c 	.word	0x2000192c

08001198 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_IRQHandler>
	...

0800119c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <HAL_Init+0x24>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_Init+0x24>)
 80011a6:	2110      	movs	r1, #16
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f809 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b2:	f7ff ff03 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	40022000 	.word	0x40022000

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_InitTick+0x5c>)
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <HAL_InitTick+0x60>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	0019      	movs	r1, r3
 80011d6:	23fa      	movs	r3, #250	@ 0xfa
 80011d8:	0098      	lsls	r0, r3, #2
 80011da:	f7fe ffa7 	bl	800012c <__udivsi3>
 80011de:	0003      	movs	r3, r0
 80011e0:	0019      	movs	r1, r3
 80011e2:	0020      	movs	r0, r4
 80011e4:	f7fe ffa2 	bl	800012c <__udivsi3>
 80011e8:	0003      	movs	r3, r0
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f905 	bl	80013fa <HAL_SYSTICK_Config>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e00f      	b.n	8001218 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d80b      	bhi.n	8001216 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	2301      	movs	r3, #1
 8001202:	425b      	negs	r3, r3
 8001204:	2200      	movs	r2, #0
 8001206:	0018      	movs	r0, r3
 8001208:	f000 f8e2 	bl	80013d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_InitTick+0x64>)
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b003      	add	sp, #12
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	20000060 	.word	0x20000060
 8001224:	20000068 	.word	0x20000068
 8001228:	20000064 	.word	0x20000064

0800122c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <HAL_IncTick+0x1c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	001a      	movs	r2, r3
 8001236:	4b05      	ldr	r3, [pc, #20]	@ (800124c <HAL_IncTick+0x20>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	18d2      	adds	r2, r2, r3
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_IncTick+0x20>)
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	20000068 	.word	0x20000068
 800124c:	200017e0 	.word	0x200017e0

08001250 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b02      	ldr	r3, [pc, #8]	@ (8001260 <HAL_GetTick+0x10>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	200017e0 	.word	0x200017e0

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff fff0 	bl	8001250 <HAL_GetTick>
 8001270:	0003      	movs	r3, r0
 8001272:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3301      	adds	r3, #1
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_Delay+0x44>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	001a      	movs	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	189b      	adds	r3, r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	f7ff ffe0 	bl	8001250 <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	46c0      	nop			@ (mov r8, r8)
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b004      	add	sp, #16
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	20000068 	.word	0x20000068

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	0002      	movs	r2, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b7f      	cmp	r3, #127	@ 0x7f
 80012c0:	d828      	bhi.n	8001314 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001380 <__NVIC_SetPriority+0xd4>)
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	33c0      	adds	r3, #192	@ 0xc0
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	589b      	ldr	r3, [r3, r2]
 80012d2:	1dfa      	adds	r2, r7, #7
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	0011      	movs	r1, r2
 80012d8:	2203      	movs	r2, #3
 80012da:	400a      	ands	r2, r1
 80012dc:	00d2      	lsls	r2, r2, #3
 80012de:	21ff      	movs	r1, #255	@ 0xff
 80012e0:	4091      	lsls	r1, r2
 80012e2:	000a      	movs	r2, r1
 80012e4:	43d2      	mvns	r2, r2
 80012e6:	401a      	ands	r2, r3
 80012e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	019b      	lsls	r3, r3, #6
 80012ee:	22ff      	movs	r2, #255	@ 0xff
 80012f0:	401a      	ands	r2, r3
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	0018      	movs	r0, r3
 80012f8:	2303      	movs	r3, #3
 80012fa:	4003      	ands	r3, r0
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001300:	481f      	ldr	r0, [pc, #124]	@ (8001380 <__NVIC_SetPriority+0xd4>)
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b25b      	sxtb	r3, r3
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	430a      	orrs	r2, r1
 800130c:	33c0      	adds	r3, #192	@ 0xc0
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001312:	e031      	b.n	8001378 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001314:	4a1b      	ldr	r2, [pc, #108]	@ (8001384 <__NVIC_SetPriority+0xd8>)
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	0019      	movs	r1, r3
 800131c:	230f      	movs	r3, #15
 800131e:	400b      	ands	r3, r1
 8001320:	3b08      	subs	r3, #8
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3306      	adds	r3, #6
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	18d3      	adds	r3, r2, r3
 800132a:	3304      	adds	r3, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1dfa      	adds	r2, r7, #7
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	0011      	movs	r1, r2
 8001334:	2203      	movs	r2, #3
 8001336:	400a      	ands	r2, r1
 8001338:	00d2      	lsls	r2, r2, #3
 800133a:	21ff      	movs	r1, #255	@ 0xff
 800133c:	4091      	lsls	r1, r2
 800133e:	000a      	movs	r2, r1
 8001340:	43d2      	mvns	r2, r2
 8001342:	401a      	ands	r2, r3
 8001344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	019b      	lsls	r3, r3, #6
 800134a:	22ff      	movs	r2, #255	@ 0xff
 800134c:	401a      	ands	r2, r3
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0018      	movs	r0, r3
 8001354:	2303      	movs	r3, #3
 8001356:	4003      	ands	r3, r0
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135c:	4809      	ldr	r0, [pc, #36]	@ (8001384 <__NVIC_SetPriority+0xd8>)
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	001c      	movs	r4, r3
 8001364:	230f      	movs	r3, #15
 8001366:	4023      	ands	r3, r4
 8001368:	3b08      	subs	r3, #8
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	430a      	orrs	r2, r1
 800136e:	3306      	adds	r3, #6
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	18c3      	adds	r3, r0, r3
 8001374:	3304      	adds	r3, #4
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	46c0      	nop			@ (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b003      	add	sp, #12
 800137e:	bd90      	pop	{r4, r7, pc}
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	1e5a      	subs	r2, r3, #1
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	045b      	lsls	r3, r3, #17
 8001398:	429a      	cmp	r2, r3
 800139a:	d301      	bcc.n	80013a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139c:	2301      	movs	r3, #1
 800139e:	e010      	b.n	80013c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <SysTick_Config+0x44>)
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	3a01      	subs	r2, #1
 80013a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a8:	2301      	movs	r3, #1
 80013aa:	425b      	negs	r3, r3
 80013ac:	2103      	movs	r1, #3
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff ff7c 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <SysTick_Config+0x44>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SysTick_Config+0x44>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	210f      	movs	r1, #15
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	1c02      	adds	r2, r0, #0
 80013e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	0011      	movs	r1, r2
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff ff5d 	bl	80012ac <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b004      	add	sp, #16
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff ffbf 	bl	8001388 <SysTick_Config>
 800140a:	0003      	movs	r3, r0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b002      	add	sp, #8
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e14f      	b.n	80016c4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4091      	lsls	r1, r2
 800142e:	000a      	movs	r2, r1
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d100      	bne.n	800143c <HAL_GPIO_Init+0x28>
 800143a:	e140      	b.n	80016be <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	4013      	ands	r3, r2
 8001444:	2b01      	cmp	r3, #1
 8001446:	d005      	beq.n	8001454 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001450:	2b02      	cmp	r3, #2
 8001452:	d130      	bne.n	80014b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	409a      	lsls	r2, r3
 8001462:	0013      	movs	r3, r2
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148a:	2201      	movs	r2, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	43da      	mvns	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	2201      	movs	r2, #1
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	4013      	ands	r3, r2
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d017      	beq.n	80014f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	43da      	mvns	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d123      	bne.n	8001546 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	58d3      	ldr	r3, [r2, r3]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2207      	movs	r2, #7
 8001510:	4013      	ands	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	43da      	mvns	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691a      	ldr	r2, [r3, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2107      	movs	r1, #7
 800152a:	400b      	ands	r3, r1
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	08da      	lsrs	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3208      	adds	r2, #8
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	6939      	ldr	r1, [r7, #16]
 8001544:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	401a      	ands	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	23c0      	movs	r3, #192	@ 0xc0
 8001580:	029b      	lsls	r3, r3, #10
 8001582:	4013      	ands	r3, r2
 8001584:	d100      	bne.n	8001588 <HAL_GPIO_Init+0x174>
 8001586:	e09a      	b.n	80016be <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001588:	4b54      	ldr	r3, [pc, #336]	@ (80016dc <HAL_GPIO_Init+0x2c8>)
 800158a:	699a      	ldr	r2, [r3, #24]
 800158c:	4b53      	ldr	r3, [pc, #332]	@ (80016dc <HAL_GPIO_Init+0x2c8>)
 800158e:	2101      	movs	r1, #1
 8001590:	430a      	orrs	r2, r1
 8001592:	619a      	str	r2, [r3, #24]
 8001594:	4b51      	ldr	r3, [pc, #324]	@ (80016dc <HAL_GPIO_Init+0x2c8>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2201      	movs	r2, #1
 800159a:	4013      	ands	r3, r2
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a0:	4a4f      	ldr	r2, [pc, #316]	@ (80016e0 <HAL_GPIO_Init+0x2cc>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	589b      	ldr	r3, [r3, r2]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2203      	movs	r2, #3
 80015b2:	4013      	ands	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	409a      	lsls	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	43da      	mvns	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	2390      	movs	r3, #144	@ 0x90
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x1e2>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a44      	ldr	r2, [pc, #272]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x1de>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a43      	ldr	r2, [pc, #268]	@ (80016e8 <HAL_GPIO_Init+0x2d4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x1da>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a42      	ldr	r2, [pc, #264]	@ (80016ec <HAL_GPIO_Init+0x2d8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x1d6>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e004      	b.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015f6:	2300      	movs	r3, #0
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	2103      	movs	r1, #3
 80015fc:	400a      	ands	r2, r1
 80015fe:	0092      	lsls	r2, r2, #2
 8001600:	4093      	lsls	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001608:	4935      	ldr	r1, [pc, #212]	@ (80016e0 <HAL_GPIO_Init+0x2cc>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4b36      	ldr	r3, [pc, #216]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	035b      	lsls	r3, r3, #13
 800162e:	4013      	ands	r3, r2
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800163a:	4b2d      	ldr	r3, [pc, #180]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001640:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43da      	mvns	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	039b      	lsls	r3, r3, #14
 8001658:	4013      	ands	r3, r2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001664:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800166a:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43da      	mvns	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	2380      	movs	r3, #128	@ 0x80
 8001680:	029b      	lsls	r3, r3, #10
 8001682:	4013      	ands	r3, r2
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43da      	mvns	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	4013      	ands	r3, r2
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	40da      	lsrs	r2, r3
 80016cc:	1e13      	subs	r3, r2, #0
 80016ce:	d000      	beq.n	80016d2 <HAL_GPIO_Init+0x2be>
 80016d0:	e6a8      	b.n	8001424 <HAL_GPIO_Init+0x10>
  } 
}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	46c0      	nop			@ (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b006      	add	sp, #24
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000
 80016e4:	48000400 	.word	0x48000400
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48000c00 	.word	0x48000c00
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e301      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	4013      	ands	r3, r2
 800170e:	d100      	bne.n	8001712 <HAL_RCC_OscConfig+0x1e>
 8001710:	e08d      	b.n	800182e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001712:	4bc3      	ldr	r3, [pc, #780]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	220c      	movs	r2, #12
 8001718:	4013      	ands	r3, r2
 800171a:	2b04      	cmp	r3, #4
 800171c:	d00e      	beq.n	800173c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800171e:	4bc0      	ldr	r3, [pc, #768]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	220c      	movs	r2, #12
 8001724:	4013      	ands	r3, r2
 8001726:	2b08      	cmp	r3, #8
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x64>
 800172a:	4bbd      	ldr	r3, [pc, #756]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	2380      	movs	r3, #128	@ 0x80
 8001730:	025b      	lsls	r3, r3, #9
 8001732:	401a      	ands	r2, r3
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	025b      	lsls	r3, r3, #9
 8001738:	429a      	cmp	r2, r3
 800173a:	d10d      	bne.n	8001758 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	4bb8      	ldr	r3, [pc, #736]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	@ 0x80
 8001742:	029b      	lsls	r3, r3, #10
 8001744:	4013      	ands	r3, r2
 8001746:	d100      	bne.n	800174a <HAL_RCC_OscConfig+0x56>
 8001748:	e070      	b.n	800182c <HAL_RCC_OscConfig+0x138>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d000      	beq.n	8001754 <HAL_RCC_OscConfig+0x60>
 8001752:	e06b      	b.n	800182c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e2d8      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d107      	bne.n	8001770 <HAL_RCC_OscConfig+0x7c>
 8001760:	4baf      	ldr	r3, [pc, #700]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4bae      	ldr	r3, [pc, #696]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001766:	2180      	movs	r1, #128	@ 0x80
 8001768:	0249      	lsls	r1, r1, #9
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e02f      	b.n	80017d0 <HAL_RCC_OscConfig+0xdc>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x9e>
 8001778:	4ba9      	ldr	r3, [pc, #676]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4ba8      	ldr	r3, [pc, #672]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800177e:	49a9      	ldr	r1, [pc, #676]	@ (8001a24 <HAL_RCC_OscConfig+0x330>)
 8001780:	400a      	ands	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	4ba6      	ldr	r3, [pc, #664]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4ba5      	ldr	r3, [pc, #660]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800178a:	49a7      	ldr	r1, [pc, #668]	@ (8001a28 <HAL_RCC_OscConfig+0x334>)
 800178c:	400a      	ands	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e01e      	b.n	80017d0 <HAL_RCC_OscConfig+0xdc>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10e      	bne.n	80017b8 <HAL_RCC_OscConfig+0xc4>
 800179a:	4ba1      	ldr	r3, [pc, #644]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4ba0      	ldr	r3, [pc, #640]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	2180      	movs	r1, #128	@ 0x80
 80017a2:	02c9      	lsls	r1, r1, #11
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	4b9d      	ldr	r3, [pc, #628]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b9c      	ldr	r3, [pc, #624]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80017ae:	2180      	movs	r1, #128	@ 0x80
 80017b0:	0249      	lsls	r1, r1, #9
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xdc>
 80017b8:	4b99      	ldr	r3, [pc, #612]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b98      	ldr	r3, [pc, #608]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80017be:	4999      	ldr	r1, [pc, #612]	@ (8001a24 <HAL_RCC_OscConfig+0x330>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	4b96      	ldr	r3, [pc, #600]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b95      	ldr	r3, [pc, #596]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	4997      	ldr	r1, [pc, #604]	@ (8001a28 <HAL_RCC_OscConfig+0x334>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d014      	beq.n	8001802 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fd3a 	bl	8001250 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e2:	f7ff fd35 	bl	8001250 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	@ 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e28a      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f4:	4b8a      	ldr	r3, [pc, #552]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	029b      	lsls	r3, r3, #10
 80017fc:	4013      	ands	r3, r2
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0xee>
 8001800:	e015      	b.n	800182e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fd25 	bl	8001250 <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fd20 	bl	8001250 <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	@ 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e275      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	4b80      	ldr	r3, [pc, #512]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	@ 0x80
 8001824:	029b      	lsls	r3, r3, #10
 8001826:	4013      	ands	r3, r2
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x118>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d100      	bne.n	800183a <HAL_RCC_OscConfig+0x146>
 8001838:	e069      	b.n	800190e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800183a:	4b79      	ldr	r3, [pc, #484]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	220c      	movs	r2, #12
 8001840:	4013      	ands	r3, r2
 8001842:	d00b      	beq.n	800185c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001844:	4b76      	ldr	r3, [pc, #472]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	220c      	movs	r2, #12
 800184a:	4013      	ands	r3, r2
 800184c:	2b08      	cmp	r3, #8
 800184e:	d11c      	bne.n	800188a <HAL_RCC_OscConfig+0x196>
 8001850:	4b73      	ldr	r3, [pc, #460]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	4013      	ands	r3, r2
 800185a:	d116      	bne.n	800188a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185c:	4b70      	ldr	r3, [pc, #448]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2202      	movs	r2, #2
 8001862:	4013      	ands	r3, r2
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x17e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e24b      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b6b      	ldr	r3, [pc, #428]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	22f8      	movs	r2, #248	@ 0xf8
 8001878:	4393      	bics	r3, r2
 800187a:	0019      	movs	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	00da      	lsls	r2, r3, #3
 8001882:	4b67      	ldr	r3, [pc, #412]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001888:	e041      	b.n	800190e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d024      	beq.n	80018dc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001892:	4b63      	ldr	r3, [pc, #396]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b62      	ldr	r3, [pc, #392]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001898:	2101      	movs	r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fcd7 	bl	8001250 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a8:	f7ff fcd2 	bl	8001250 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e227      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	4b59      	ldr	r3, [pc, #356]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0f1      	beq.n	80018a8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b56      	ldr	r3, [pc, #344]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	22f8      	movs	r2, #248	@ 0xf8
 80018ca:	4393      	bics	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	00da      	lsls	r2, r3, #3
 80018d4:	4b52      	ldr	r3, [pc, #328]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e018      	b.n	800190e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018dc:	4b50      	ldr	r3, [pc, #320]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fcb2 	bl	8001250 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fcad 	bl	8001250 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e202      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001904:	4b46      	ldr	r3, [pc, #280]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d1f1      	bne.n	80018f2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2208      	movs	r2, #8
 8001914:	4013      	ands	r3, r2
 8001916:	d036      	beq.n	8001986 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d019      	beq.n	8001954 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001920:	4b3f      	ldr	r3, [pc, #252]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001922:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001924:	4b3e      	ldr	r3, [pc, #248]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001926:	2101      	movs	r1, #1
 8001928:	430a      	orrs	r2, r1
 800192a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff fc90 	bl	8001250 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff fc8b 	bl	8001250 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1e0      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001948:	4b35      	ldr	r3, [pc, #212]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d0f1      	beq.n	8001936 <HAL_RCC_OscConfig+0x242>
 8001952:	e018      	b.n	8001986 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001954:	4b32      	ldr	r3, [pc, #200]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001958:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800195a:	2101      	movs	r1, #1
 800195c:	438a      	bics	r2, r1
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff fc76 	bl	8001250 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196a:	f7ff fc71 	bl	8001250 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e1c6      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d1f1      	bne.n	800196a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2204      	movs	r2, #4
 800198c:	4013      	ands	r3, r2
 800198e:	d100      	bne.n	8001992 <HAL_RCC_OscConfig+0x29e>
 8001990:	e0b4      	b.n	8001afc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001992:	201f      	movs	r0, #31
 8001994:	183b      	adds	r3, r7, r0
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199a:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	2380      	movs	r3, #128	@ 0x80
 80019a0:	055b      	lsls	r3, r3, #21
 80019a2:	4013      	ands	r3, r2
 80019a4:	d110      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	69da      	ldr	r2, [r3, #28]
 80019aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	2180      	movs	r1, #128	@ 0x80
 80019ae:	0549      	lsls	r1, r1, #21
 80019b0:	430a      	orrs	r2, r1
 80019b2:	61da      	str	r2, [r3, #28]
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	69da      	ldr	r2, [r3, #28]
 80019b8:	2380      	movs	r3, #128	@ 0x80
 80019ba:	055b      	lsls	r3, r3, #21
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019c2:	183b      	adds	r3, r7, r0
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_RCC_OscConfig+0x338>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d11a      	bne.n	8001a0a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d4:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_RCC_OscConfig+0x338>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <HAL_RCC_OscConfig+0x338>)
 80019da:	2180      	movs	r1, #128	@ 0x80
 80019dc:	0049      	lsls	r1, r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fc35 	bl	8001250 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ec:	f7ff fc30 	bl	8001250 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	@ 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e185      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <HAL_RCC_OscConfig+0x338>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10e      	bne.n	8001a30 <HAL_RCC_OscConfig+0x33c>
 8001a12:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001a14:	6a1a      	ldr	r2, [r3, #32]
 8001a16:	4b02      	ldr	r3, [pc, #8]	@ (8001a20 <HAL_RCC_OscConfig+0x32c>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	621a      	str	r2, [r3, #32]
 8001a1e:	e035      	b.n	8001a8c <HAL_RCC_OscConfig+0x398>
 8001a20:	40021000 	.word	0x40021000
 8001a24:	fffeffff 	.word	0xfffeffff
 8001a28:	fffbffff 	.word	0xfffbffff
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x35e>
 8001a38:	4bb6      	ldr	r3, [pc, #728]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	4bb5      	ldr	r3, [pc, #724]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	438a      	bics	r2, r1
 8001a42:	621a      	str	r2, [r3, #32]
 8001a44:	4bb3      	ldr	r3, [pc, #716]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a46:	6a1a      	ldr	r2, [r3, #32]
 8001a48:	4bb2      	ldr	r3, [pc, #712]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	621a      	str	r2, [r3, #32]
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x398>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x380>
 8001a5a:	4bae      	ldr	r3, [pc, #696]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a5c:	6a1a      	ldr	r2, [r3, #32]
 8001a5e:	4bad      	ldr	r3, [pc, #692]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a60:	2104      	movs	r1, #4
 8001a62:	430a      	orrs	r2, r1
 8001a64:	621a      	str	r2, [r3, #32]
 8001a66:	4bab      	ldr	r3, [pc, #684]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a68:	6a1a      	ldr	r2, [r3, #32]
 8001a6a:	4baa      	ldr	r3, [pc, #680]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	621a      	str	r2, [r3, #32]
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0x398>
 8001a74:	4ba7      	ldr	r3, [pc, #668]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a76:	6a1a      	ldr	r2, [r3, #32]
 8001a78:	4ba6      	ldr	r3, [pc, #664]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	621a      	str	r2, [r3, #32]
 8001a80:	4ba4      	ldr	r3, [pc, #656]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	4ba3      	ldr	r3, [pc, #652]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001a86:	2104      	movs	r1, #4
 8001a88:	438a      	bics	r2, r1
 8001a8a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d014      	beq.n	8001abe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a94:	f7ff fbdc 	bl	8001250 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	e009      	b.n	8001ab2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7ff fbd7 	bl	8001250 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	4a9b      	ldr	r2, [pc, #620]	@ (8001d18 <HAL_RCC_OscConfig+0x624>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e12b      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	4b98      	ldr	r3, [pc, #608]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x3aa>
 8001abc:	e013      	b.n	8001ae6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff fbc7 	bl	8001250 <HAL_GetTick>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac6:	e009      	b.n	8001adc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fbc2 	bl	8001250 <HAL_GetTick>
 8001acc:	0002      	movs	r2, r0
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	4a91      	ldr	r2, [pc, #580]	@ (8001d18 <HAL_RCC_OscConfig+0x624>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e116      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001adc:	4b8d      	ldr	r3, [pc, #564]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae6:	231f      	movs	r3, #31
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af0:	4b88      	ldr	r3, [pc, #544]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001af2:	69da      	ldr	r2, [r3, #28]
 8001af4:	4b87      	ldr	r3, [pc, #540]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001af6:	4989      	ldr	r1, [pc, #548]	@ (8001d1c <HAL_RCC_OscConfig+0x628>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2210      	movs	r2, #16
 8001b02:	4013      	ands	r3, r2
 8001b04:	d063      	beq.n	8001bce <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d12a      	bne.n	8001b64 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b0e:	4b81      	ldr	r3, [pc, #516]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b12:	4b80      	ldr	r3, [pc, #512]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b14:	2104      	movs	r1, #4
 8001b16:	430a      	orrs	r2, r1
 8001b18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b1a:	4b7e      	ldr	r3, [pc, #504]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b1e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	430a      	orrs	r2, r1
 8001b24:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fb93 	bl	8001250 <HAL_GetTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b30:	f7ff fb8e 	bl	8001250 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0e3      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b42:	4b74      	ldr	r3, [pc, #464]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0f1      	beq.n	8001b30 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b4c:	4b71      	ldr	r3, [pc, #452]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b50:	22f8      	movs	r2, #248	@ 0xf8
 8001b52:	4393      	bics	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	00da      	lsls	r2, r3, #3
 8001b5c:	4b6d      	ldr	r3, [pc, #436]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b62:	e034      	b.n	8001bce <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	3305      	adds	r3, #5
 8001b6a:	d111      	bne.n	8001b90 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b6c:	4b69      	ldr	r3, [pc, #420]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b70:	4b68      	ldr	r3, [pc, #416]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b72:	2104      	movs	r1, #4
 8001b74:	438a      	bics	r2, r1
 8001b76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b78:	4b66      	ldr	r3, [pc, #408]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7c:	22f8      	movs	r2, #248	@ 0xf8
 8001b7e:	4393      	bics	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	00da      	lsls	r2, r3, #3
 8001b88:	4b62      	ldr	r3, [pc, #392]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b8e:	e01e      	b.n	8001bce <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b90:	4b60      	ldr	r3, [pc, #384]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b94:	4b5f      	ldr	r3, [pc, #380]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b96:	2104      	movs	r1, #4
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba0:	4b5c      	ldr	r3, [pc, #368]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fb52 	bl	8001250 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bb2:	f7ff fb4d 	bl	8001250 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0a2      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bc4:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc8:	2202      	movs	r2, #2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d1f1      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d100      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4e4>
 8001bd6:	e097      	b.n	8001d08 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd8:	4b4e      	ldr	r3, [pc, #312]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	220c      	movs	r2, #12
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_OscConfig+0x4f2>
 8001be4:	e06b      	b.n	8001cbe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d14c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b49      	ldr	r3, [pc, #292]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b48      	ldr	r3, [pc, #288]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001bf4:	494a      	ldr	r1, [pc, #296]	@ (8001d20 <HAL_RCC_OscConfig+0x62c>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fb29 	bl	8001250 <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff fb24 	bl	8001250 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e079      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c16:	4b3f      	ldr	r3, [pc, #252]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	049b      	lsls	r3, r3, #18
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c22:	4b3c      	ldr	r3, [pc, #240]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c26:	220f      	movs	r2, #15
 8001c28:	4393      	bics	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c30:	4b38      	ldr	r3, [pc, #224]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c36:	4b37      	ldr	r3, [pc, #220]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d24 <HAL_RCC_OscConfig+0x630>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	4b32      	ldr	r3, [pc, #200]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b30      	ldr	r3, [pc, #192]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001c56:	2180      	movs	r1, #128	@ 0x80
 8001c58:	0449      	lsls	r1, r1, #17
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff faf7 	bl	8001250 <HAL_GetTick>
 8001c62:	0003      	movs	r3, r0
 8001c64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c68:	f7ff faf2 	bl	8001250 <HAL_GetTick>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e047      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7a:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	049b      	lsls	r3, r3, #18
 8001c82:	4013      	ands	r3, r2
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x574>
 8001c86:	e03f      	b.n	8001d08 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	4924      	ldr	r1, [pc, #144]	@ (8001d20 <HAL_RCC_OscConfig+0x62c>)
 8001c90:	400a      	ands	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fadc 	bl	8001250 <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fad7 	bl	8001250 <HAL_GetTick>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e02c      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb0:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	049b      	lsls	r3, r3, #18
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5aa>
 8001cbc:	e024      	b.n	8001d08 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e01f      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001cca:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <HAL_RCC_OscConfig+0x620>)
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	025b      	lsls	r3, r3, #9
 8001cdc:	401a      	ands	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d10e      	bne.n	8001d04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	220f      	movs	r2, #15
 8001cea:	401a      	ands	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	23f0      	movs	r3, #240	@ 0xf0
 8001cf8:	039b      	lsls	r3, r3, #14
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b008      	add	sp, #32
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	40021000 	.word	0x40021000
 8001d18:	00001388 	.word	0x00001388
 8001d1c:	efffffff 	.word	0xefffffff
 8001d20:	feffffff 	.word	0xfeffffff
 8001d24:	ffc2ffff 	.word	0xffc2ffff

08001d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b3      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b5b      	ldr	r3, [pc, #364]	@ (8001eac <HAL_RCC_ClockConfig+0x184>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d911      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b58      	ldr	r3, [pc, #352]	@ (8001eac <HAL_RCC_ClockConfig+0x184>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4393      	bics	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	4b55      	ldr	r3, [pc, #340]	@ (8001eac <HAL_RCC_ClockConfig+0x184>)
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5c:	4b53      	ldr	r3, [pc, #332]	@ (8001eac <HAL_RCC_ClockConfig+0x184>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4013      	ands	r3, r2
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e09a      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2202      	movs	r2, #2
 8001d74:	4013      	ands	r3, r2
 8001d76:	d015      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d006      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d82:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001d88:	21e0      	movs	r1, #224	@ 0xe0
 8001d8a:	00c9      	lsls	r1, r1, #3
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b47      	ldr	r3, [pc, #284]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	22f0      	movs	r2, #240	@ 0xf0
 8001d96:	4393      	bics	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	4b44      	ldr	r3, [pc, #272]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	d040      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d114      	bne.n	8001dec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e06e      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b38      	ldr	r3, [pc, #224]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	049b      	lsls	r3, r3, #18
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d108      	bne.n	8001dec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e062      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4b34      	ldr	r3, [pc, #208]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2202      	movs	r2, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e05b      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dec:	4b30      	ldr	r3, [pc, #192]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	4393      	bics	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e00:	f7ff fa26 	bl	8001250 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e08:	e009      	b.n	8001e1e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0a:	f7ff fa21 	bl	8001250 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	4a27      	ldr	r2, [pc, #156]	@ (8001eb4 <HAL_RCC_ClockConfig+0x18c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e042      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b24      	ldr	r3, [pc, #144]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	220c      	movs	r2, #12
 8001e24:	401a      	ands	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1ec      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <HAL_RCC_ClockConfig+0x184>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d211      	bcs.n	8001e62 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <HAL_RCC_ClockConfig+0x184>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4393      	bics	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <HAL_RCC_ClockConfig+0x184>)
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e50:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <HAL_RCC_ClockConfig+0x184>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2201      	movs	r2, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e020      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2204      	movs	r2, #4
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d009      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6c:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a11      	ldr	r2, [pc, #68]	@ (8001eb8 <HAL_RCC_ClockConfig+0x190>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e80:	f000 f820 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8001e84:	0001      	movs	r1, r0
 8001e86:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <HAL_RCC_ClockConfig+0x188>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	4013      	ands	r3, r2
 8001e90:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <HAL_RCC_ClockConfig+0x194>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	000a      	movs	r2, r1
 8001e96:	40da      	lsrs	r2, r3
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <HAL_RCC_ClockConfig+0x198>)
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff f991 	bl	80011c4 <HAL_InitTick>
  
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b004      	add	sp, #16
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40022000 	.word	0x40022000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	00001388 	.word	0x00001388
 8001eb8:	fffff8ff 	.word	0xfffff8ff
 8001ebc:	08003644 	.word	0x08003644
 8001ec0:	20000060 	.word	0x20000060

08001ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ede:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d002      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x30>
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d003      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0x36>
 8001ef2:	e02c      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ef6:	613b      	str	r3, [r7, #16]
      break;
 8001ef8:	e02c      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	0c9b      	lsrs	r3, r3, #18
 8001efe:	220f      	movs	r2, #15
 8001f00:	4013      	ands	r3, r2
 8001f02:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	4013      	ands	r3, r2
 8001f10:	4a16      	ldr	r2, [pc, #88]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	025b      	lsls	r3, r3, #9
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d009      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	4810      	ldr	r0, [pc, #64]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f24:	f7fe f902 	bl	800012c <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4353      	muls	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e009      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	000a      	movs	r2, r1
 8001f38:	0152      	lsls	r2, r2, #5
 8001f3a:	1a52      	subs	r2, r2, r1
 8001f3c:	0193      	lsls	r3, r2, #6
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	185b      	adds	r3, r3, r1
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
      break;
 8001f4c:	e002      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f4e:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f50:	613b      	str	r3, [r7, #16]
      break;
 8001f52:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f54:	693b      	ldr	r3, [r7, #16]
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b006      	add	sp, #24
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	40021000 	.word	0x40021000
 8001f64:	007a1200 	.word	0x007a1200
 8001f68:	0800365c 	.word	0x0800365c
 8001f6c:	0800366c 	.word	0x0800366c

08001f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f74:	4b02      	ldr	r3, [pc, #8]	@ (8001f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	20000060 	.word	0x20000060

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f88:	f7ff fff2 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001f8c:	0001      	movs	r1, r0
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	2207      	movs	r2, #7
 8001f96:	4013      	ands	r3, r2
 8001f98:	4a04      	ldr	r2, [pc, #16]	@ (8001fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f9a:	5cd3      	ldrb	r3, [r2, r3]
 8001f9c:	40d9      	lsrs	r1, r3
 8001f9e:	000b      	movs	r3, r1
}    
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08003654 	.word	0x08003654

08001fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e044      	b.n	800204c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d107      	bne.n	8001fda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2278      	movs	r2, #120	@ 0x78
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7ff f815 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2224      	movs	r2, #36	@ 0x24
 8001fde:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2101      	movs	r1, #1
 8001fec:	438a      	bics	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 fa0c 	bl	8002418 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	0018      	movs	r0, r3
 8002004:	f000 f8c8 	bl	8002198 <UART_SetConfig>
 8002008:	0003      	movs	r3, r0
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e01c      	b.n	800204c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	490d      	ldr	r1, [pc, #52]	@ (8002054 <HAL_UART_Init+0xa4>)
 800201e:	400a      	ands	r2, r1
 8002020:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2108      	movs	r1, #8
 800202e:	438a      	bics	r2, r1
 8002030:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 fa9b 	bl	8002580 <UART_CheckIdleState>
 800204a:	0003      	movs	r3, r0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b002      	add	sp, #8
 8002052:	bd80      	pop	{r7, pc}
 8002054:	fffff7ff 	.word	0xfffff7ff

08002058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	1dbb      	adds	r3, r7, #6
 8002066:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800206c:	2b20      	cmp	r3, #32
 800206e:	d000      	beq.n	8002072 <HAL_UART_Transmit+0x1a>
 8002070:	e08c      	b.n	800218c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_UART_Transmit+0x28>
 8002078:	1dbb      	adds	r3, r7, #6
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e084      	b.n	800218e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	015b      	lsls	r3, r3, #5
 800208c:	429a      	cmp	r2, r3
 800208e:	d109      	bne.n	80020a4 <HAL_UART_Transmit+0x4c>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	d001      	beq.n	80020a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e074      	b.n	800218e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2284      	movs	r2, #132	@ 0x84
 80020a8:	2100      	movs	r1, #0
 80020aa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2221      	movs	r2, #33	@ 0x21
 80020b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020b2:	f7ff f8cd 	bl	8001250 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1dba      	adds	r2, r7, #6
 80020be:	2150      	movs	r1, #80	@ 0x50
 80020c0:	8812      	ldrh	r2, [r2, #0]
 80020c2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1dba      	adds	r2, r7, #6
 80020c8:	2152      	movs	r1, #82	@ 0x52
 80020ca:	8812      	ldrh	r2, [r2, #0]
 80020cc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	2380      	movs	r3, #128	@ 0x80
 80020d4:	015b      	lsls	r3, r3, #5
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d108      	bne.n	80020ec <HAL_UART_Transmit+0x94>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d104      	bne.n	80020ec <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	e003      	b.n	80020f4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020f4:	e02f      	b.n	8002156 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	0013      	movs	r3, r2
 8002100:	2200      	movs	r2, #0
 8002102:	2180      	movs	r1, #128	@ 0x80
 8002104:	f000 fae4 	bl	80026d0 <UART_WaitOnFlagUntilTimeout>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d004      	beq.n	8002116 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e03b      	b.n	800218e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	881a      	ldrh	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	05d2      	lsls	r2, r2, #23
 8002126:	0dd2      	lsrs	r2, r2, #23
 8002128:	b292      	uxth	r2, r2
 800212a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	3302      	adds	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	e007      	b.n	8002144 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2252      	movs	r2, #82	@ 0x52
 8002148:	5a9b      	ldrh	r3, [r3, r2]
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b299      	uxth	r1, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2252      	movs	r2, #82	@ 0x52
 8002154:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2252      	movs	r2, #82	@ 0x52
 800215a:	5a9b      	ldrh	r3, [r3, r2]
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1c9      	bne.n	80020f6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	0013      	movs	r3, r2
 800216c:	2200      	movs	r2, #0
 800216e:	2140      	movs	r1, #64	@ 0x40
 8002170:	f000 faae 	bl	80026d0 <UART_WaitOnFlagUntilTimeout>
 8002174:	1e03      	subs	r3, r0, #0
 8002176:	d004      	beq.n	8002182 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e005      	b.n	800218e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b008      	add	sp, #32
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021a0:	231e      	movs	r3, #30
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a8d      	ldr	r2, [pc, #564]	@ (80023fc <UART_SetConfig+0x264>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a88      	ldr	r2, [pc, #544]	@ (8002400 <UART_SetConfig+0x268>)
 80021de:	4013      	ands	r3, r2
 80021e0:	0019      	movs	r1, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a7f      	ldr	r2, [pc, #508]	@ (8002404 <UART_SetConfig+0x26c>)
 8002206:	4013      	ands	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	430a      	orrs	r2, r1
 8002212:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a7b      	ldr	r2, [pc, #492]	@ (8002408 <UART_SetConfig+0x270>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d127      	bne.n	800226e <UART_SetConfig+0xd6>
 800221e:	4b7b      	ldr	r3, [pc, #492]	@ (800240c <UART_SetConfig+0x274>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	2203      	movs	r2, #3
 8002224:	4013      	ands	r3, r2
 8002226:	2b03      	cmp	r3, #3
 8002228:	d00d      	beq.n	8002246 <UART_SetConfig+0xae>
 800222a:	d81b      	bhi.n	8002264 <UART_SetConfig+0xcc>
 800222c:	2b02      	cmp	r3, #2
 800222e:	d014      	beq.n	800225a <UART_SetConfig+0xc2>
 8002230:	d818      	bhi.n	8002264 <UART_SetConfig+0xcc>
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <UART_SetConfig+0xa4>
 8002236:	2b01      	cmp	r3, #1
 8002238:	d00a      	beq.n	8002250 <UART_SetConfig+0xb8>
 800223a:	e013      	b.n	8002264 <UART_SetConfig+0xcc>
 800223c:	231f      	movs	r3, #31
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e021      	b.n	800228a <UART_SetConfig+0xf2>
 8002246:	231f      	movs	r3, #31
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e01c      	b.n	800228a <UART_SetConfig+0xf2>
 8002250:	231f      	movs	r3, #31
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2204      	movs	r2, #4
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e017      	b.n	800228a <UART_SetConfig+0xf2>
 800225a:	231f      	movs	r3, #31
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	2208      	movs	r2, #8
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e012      	b.n	800228a <UART_SetConfig+0xf2>
 8002264:	231f      	movs	r3, #31
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2210      	movs	r2, #16
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e00d      	b.n	800228a <UART_SetConfig+0xf2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a67      	ldr	r2, [pc, #412]	@ (8002410 <UART_SetConfig+0x278>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d104      	bne.n	8002282 <UART_SetConfig+0xea>
 8002278:	231f      	movs	r3, #31
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e003      	b.n	800228a <UART_SetConfig+0xf2>
 8002282:	231f      	movs	r3, #31
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2210      	movs	r2, #16
 8002288:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69da      	ldr	r2, [r3, #28]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	429a      	cmp	r2, r3
 8002294:	d15c      	bne.n	8002350 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002296:	231f      	movs	r3, #31
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d015      	beq.n	80022cc <UART_SetConfig+0x134>
 80022a0:	dc18      	bgt.n	80022d4 <UART_SetConfig+0x13c>
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d00d      	beq.n	80022c2 <UART_SetConfig+0x12a>
 80022a6:	dc15      	bgt.n	80022d4 <UART_SetConfig+0x13c>
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <UART_SetConfig+0x11a>
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d005      	beq.n	80022bc <UART_SetConfig+0x124>
 80022b0:	e010      	b.n	80022d4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022b2:	f7ff fe67 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 80022b6:	0003      	movs	r3, r0
 80022b8:	61bb      	str	r3, [r7, #24]
        break;
 80022ba:	e012      	b.n	80022e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022bc:	4b55      	ldr	r3, [pc, #340]	@ (8002414 <UART_SetConfig+0x27c>)
 80022be:	61bb      	str	r3, [r7, #24]
        break;
 80022c0:	e00f      	b.n	80022e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022c2:	f7ff fdff 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
        break;
 80022ca:	e00a      	b.n	80022e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	61bb      	str	r3, [r7, #24]
        break;
 80022d2:	e006      	b.n	80022e2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022d8:	231e      	movs	r3, #30
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
        break;
 80022e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d100      	bne.n	80022ea <UART_SetConfig+0x152>
 80022e8:	e07a      	b.n	80023e0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	005a      	lsls	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	18d2      	adds	r2, r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0019      	movs	r1, r3
 80022fc:	0010      	movs	r0, r2
 80022fe:	f7fd ff15 	bl	800012c <__udivsi3>
 8002302:	0003      	movs	r3, r0
 8002304:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d91c      	bls.n	8002346 <UART_SetConfig+0x1ae>
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	025b      	lsls	r3, r3, #9
 8002312:	429a      	cmp	r2, r3
 8002314:	d217      	bcs.n	8002346 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	b29a      	uxth	r2, r3
 800231a:	200e      	movs	r0, #14
 800231c:	183b      	adds	r3, r7, r0
 800231e:	210f      	movs	r1, #15
 8002320:	438a      	bics	r2, r1
 8002322:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	b29b      	uxth	r3, r3
 800232a:	2207      	movs	r2, #7
 800232c:	4013      	ands	r3, r2
 800232e:	b299      	uxth	r1, r3
 8002330:	183b      	adds	r3, r7, r0
 8002332:	183a      	adds	r2, r7, r0
 8002334:	8812      	ldrh	r2, [r2, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	183a      	adds	r2, r7, r0
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e04c      	b.n	80023e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002346:	231e      	movs	r3, #30
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e047      	b.n	80023e0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002350:	231f      	movs	r3, #31
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b08      	cmp	r3, #8
 8002358:	d015      	beq.n	8002386 <UART_SetConfig+0x1ee>
 800235a:	dc18      	bgt.n	800238e <UART_SetConfig+0x1f6>
 800235c:	2b04      	cmp	r3, #4
 800235e:	d00d      	beq.n	800237c <UART_SetConfig+0x1e4>
 8002360:	dc15      	bgt.n	800238e <UART_SetConfig+0x1f6>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <UART_SetConfig+0x1d4>
 8002366:	2b02      	cmp	r3, #2
 8002368:	d005      	beq.n	8002376 <UART_SetConfig+0x1de>
 800236a:	e010      	b.n	800238e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800236c:	f7ff fe0a 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8002370:	0003      	movs	r3, r0
 8002372:	61bb      	str	r3, [r7, #24]
        break;
 8002374:	e012      	b.n	800239c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002376:	4b27      	ldr	r3, [pc, #156]	@ (8002414 <UART_SetConfig+0x27c>)
 8002378:	61bb      	str	r3, [r7, #24]
        break;
 800237a:	e00f      	b.n	800239c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800237c:	f7ff fda2 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8002380:	0003      	movs	r3, r0
 8002382:	61bb      	str	r3, [r7, #24]
        break;
 8002384:	e00a      	b.n	800239c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	61bb      	str	r3, [r7, #24]
        break;
 800238c:	e006      	b.n	800239c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002392:	231e      	movs	r3, #30
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
        break;
 800239a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01e      	beq.n	80023e0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	085a      	lsrs	r2, r3, #1
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	18d2      	adds	r2, r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	0019      	movs	r1, r3
 80023b2:	0010      	movs	r0, r2
 80023b4:	f7fd feba 	bl	800012c <__udivsi3>
 80023b8:	0003      	movs	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	d90a      	bls.n	80023d8 <UART_SetConfig+0x240>
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d205      	bcs.n	80023d8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	e003      	b.n	80023e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80023d8:	231e      	movs	r3, #30
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80023ec:	231e      	movs	r3, #30
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	781b      	ldrb	r3, [r3, #0]
}
 80023f2:	0018      	movs	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b008      	add	sp, #32
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	ffff69f3 	.word	0xffff69f3
 8002400:	ffffcfff 	.word	0xffffcfff
 8002404:	fffff4ff 	.word	0xfffff4ff
 8002408:	40013800 	.word	0x40013800
 800240c:	40021000 	.word	0x40021000
 8002410:	40004400 	.word	0x40004400
 8002414:	007a1200 	.word	0x007a1200

08002418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	2208      	movs	r2, #8
 8002426:	4013      	ands	r3, r2
 8002428:	d00b      	beq.n	8002442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a4a      	ldr	r2, [pc, #296]	@ (800255c <UART_AdvFeatureConfig+0x144>)
 8002432:	4013      	ands	r3, r2
 8002434:	0019      	movs	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	2201      	movs	r2, #1
 8002448:	4013      	ands	r3, r2
 800244a:	d00b      	beq.n	8002464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a43      	ldr	r2, [pc, #268]	@ (8002560 <UART_AdvFeatureConfig+0x148>)
 8002454:	4013      	ands	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	2202      	movs	r2, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d00b      	beq.n	8002486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a3b      	ldr	r2, [pc, #236]	@ (8002564 <UART_AdvFeatureConfig+0x14c>)
 8002476:	4013      	ands	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	2204      	movs	r2, #4
 800248c:	4013      	ands	r3, r2
 800248e:	d00b      	beq.n	80024a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a34      	ldr	r2, [pc, #208]	@ (8002568 <UART_AdvFeatureConfig+0x150>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	2210      	movs	r2, #16
 80024ae:	4013      	ands	r3, r2
 80024b0:	d00b      	beq.n	80024ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a2c      	ldr	r2, [pc, #176]	@ (800256c <UART_AdvFeatureConfig+0x154>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	2220      	movs	r2, #32
 80024d0:	4013      	ands	r3, r2
 80024d2:	d00b      	beq.n	80024ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4a25      	ldr	r2, [pc, #148]	@ (8002570 <UART_AdvFeatureConfig+0x158>)
 80024dc:	4013      	ands	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	2240      	movs	r2, #64	@ 0x40
 80024f2:	4013      	ands	r3, r2
 80024f4:	d01d      	beq.n	8002532 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002574 <UART_AdvFeatureConfig+0x15c>)
 80024fe:	4013      	ands	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	035b      	lsls	r3, r3, #13
 8002516:	429a      	cmp	r2, r3
 8002518:	d10b      	bne.n	8002532 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a15      	ldr	r2, [pc, #84]	@ (8002578 <UART_AdvFeatureConfig+0x160>)
 8002522:	4013      	ands	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	2280      	movs	r2, #128	@ 0x80
 8002538:	4013      	ands	r3, r2
 800253a:	d00b      	beq.n	8002554 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4a0e      	ldr	r2, [pc, #56]	@ (800257c <UART_AdvFeatureConfig+0x164>)
 8002544:	4013      	ands	r3, r2
 8002546:	0019      	movs	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	605a      	str	r2, [r3, #4]
  }
}
 8002554:	46c0      	nop			@ (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}
 800255c:	ffff7fff 	.word	0xffff7fff
 8002560:	fffdffff 	.word	0xfffdffff
 8002564:	fffeffff 	.word	0xfffeffff
 8002568:	fffbffff 	.word	0xfffbffff
 800256c:	ffffefff 	.word	0xffffefff
 8002570:	ffffdfff 	.word	0xffffdfff
 8002574:	ffefffff 	.word	0xffefffff
 8002578:	ff9fffff 	.word	0xff9fffff
 800257c:	fff7ffff 	.word	0xfff7ffff

08002580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b092      	sub	sp, #72	@ 0x48
 8002584:	af02      	add	r7, sp, #8
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2284      	movs	r2, #132	@ 0x84
 800258c:	2100      	movs	r1, #0
 800258e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002590:	f7fe fe5e 	bl	8001250 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2208      	movs	r2, #8
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d12c      	bne.n	8002600 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a8:	2280      	movs	r2, #128	@ 0x80
 80025aa:	0391      	lsls	r1, r2, #14
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4a46      	ldr	r2, [pc, #280]	@ (80026c8 <UART_CheckIdleState+0x148>)
 80025b0:	9200      	str	r2, [sp, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f000 f88c 	bl	80026d0 <UART_WaitOnFlagUntilTimeout>
 80025b8:	1e03      	subs	r3, r0, #0
 80025ba:	d021      	beq.n	8002600 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025bc:	f3ef 8310 	mrs	r3, PRIMASK
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80025c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025c6:	2301      	movs	r3, #1
 80025c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025cc:	f383 8810 	msr	PRIMASK, r3
}
 80025d0:	46c0      	nop			@ (mov r8, r8)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2180      	movs	r1, #128	@ 0x80
 80025de:	438a      	bics	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e8:	f383 8810 	msr	PRIMASK, r3
}
 80025ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2278      	movs	r2, #120	@ 0x78
 80025f8:	2100      	movs	r1, #0
 80025fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e05f      	b.n	80026c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2204      	movs	r2, #4
 8002608:	4013      	ands	r3, r2
 800260a:	2b04      	cmp	r3, #4
 800260c:	d146      	bne.n	800269c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800260e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002610:	2280      	movs	r2, #128	@ 0x80
 8002612:	03d1      	lsls	r1, r2, #15
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4a2c      	ldr	r2, [pc, #176]	@ (80026c8 <UART_CheckIdleState+0x148>)
 8002618:	9200      	str	r2, [sp, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	f000 f858 	bl	80026d0 <UART_WaitOnFlagUntilTimeout>
 8002620:	1e03      	subs	r3, r0, #0
 8002622:	d03b      	beq.n	800269c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002624:	f3ef 8310 	mrs	r3, PRIMASK
 8002628:	60fb      	str	r3, [r7, #12]
  return(result);
 800262a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34
 800262e:	2301      	movs	r3, #1
 8002630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f383 8810 	msr	PRIMASK, r3
}
 8002638:	46c0      	nop			@ (mov r8, r8)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4921      	ldr	r1, [pc, #132]	@ (80026cc <UART_CheckIdleState+0x14c>)
 8002646:	400a      	ands	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f383 8810 	msr	PRIMASK, r3
}
 8002654:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002656:	f3ef 8310 	mrs	r3, PRIMASK
 800265a:	61bb      	str	r3, [r7, #24]
  return(result);
 800265c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002660:	2301      	movs	r3, #1
 8002662:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f383 8810 	msr	PRIMASK, r3
}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2101      	movs	r1, #1
 8002678:	438a      	bics	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f383 8810 	msr	PRIMASK, r3
}
 8002686:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2280      	movs	r2, #128	@ 0x80
 800268c:	2120      	movs	r1, #32
 800268e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2278      	movs	r2, #120	@ 0x78
 8002694:	2100      	movs	r1, #0
 8002696:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e011      	b.n	80026c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2280      	movs	r2, #128	@ 0x80
 80026a6:	2120      	movs	r1, #32
 80026a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2278      	movs	r2, #120	@ 0x78
 80026ba:	2100      	movs	r1, #0
 80026bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b010      	add	sp, #64	@ 0x40
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	01ffffff 	.word	0x01ffffff
 80026cc:	fffffedf 	.word	0xfffffedf

080026d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e0:	e051      	b.n	8002786 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	3301      	adds	r3, #1
 80026e6:	d04e      	beq.n	8002786 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e8:	f7fe fdb2 	bl	8001250 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d302      	bcc.n	80026fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e051      	b.n	80027a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2204      	movs	r2, #4
 800270a:	4013      	ands	r3, r2
 800270c:	d03b      	beq.n	8002786 <UART_WaitOnFlagUntilTimeout+0xb6>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b80      	cmp	r3, #128	@ 0x80
 8002712:	d038      	beq.n	8002786 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b40      	cmp	r3, #64	@ 0x40
 8002718:	d035      	beq.n	8002786 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2208      	movs	r2, #8
 8002722:	4013      	ands	r3, r2
 8002724:	2b08      	cmp	r3, #8
 8002726:	d111      	bne.n	800274c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2208      	movs	r2, #8
 800272e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	0018      	movs	r0, r3
 8002734:	f000 f83c 	bl	80027b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2284      	movs	r2, #132	@ 0x84
 800273c:	2108      	movs	r1, #8
 800273e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2278      	movs	r2, #120	@ 0x78
 8002744:	2100      	movs	r1, #0
 8002746:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e02c      	b.n	80027a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	401a      	ands	r2, r3
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	429a      	cmp	r2, r3
 800275e:	d112      	bne.n	8002786 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2280      	movs	r2, #128	@ 0x80
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	0018      	movs	r0, r3
 800276e:	f000 f81f 	bl	80027b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2284      	movs	r2, #132	@ 0x84
 8002776:	2120      	movs	r1, #32
 8002778:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2278      	movs	r2, #120	@ 0x78
 800277e:	2100      	movs	r1, #0
 8002780:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e00f      	b.n	80027a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	4013      	ands	r3, r2
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	425a      	negs	r2, r3
 8002796:	4153      	adcs	r3, r2
 8002798:	b2db      	uxtb	r3, r3
 800279a:	001a      	movs	r2, r3
 800279c:	1dfb      	adds	r3, r7, #7
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d09e      	beq.n	80026e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	0018      	movs	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b004      	add	sp, #16
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	@ 0x38
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b8:	f3ef 8310 	mrs	r3, PRIMASK
 80027bc:	617b      	str	r3, [r7, #20]
  return(result);
 80027be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c2:	2301      	movs	r3, #1
 80027c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f383 8810 	msr	PRIMASK, r3
}
 80027cc:	46c0      	nop			@ (mov r8, r8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4926      	ldr	r1, [pc, #152]	@ (8002874 <UART_EndRxTransfer+0xc4>)
 80027da:	400a      	ands	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f383 8810 	msr	PRIMASK, r3
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ea:	f3ef 8310 	mrs	r3, PRIMASK
 80027ee:	623b      	str	r3, [r7, #32]
  return(result);
 80027f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	f383 8810 	msr	PRIMASK, r3
}
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2101      	movs	r1, #1
 800280c:	438a      	bics	r2, r1
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002812:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002816:	f383 8810 	msr	PRIMASK, r3
}
 800281a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002820:	2b01      	cmp	r3, #1
 8002822:	d118      	bne.n	8002856 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002824:	f3ef 8310 	mrs	r3, PRIMASK
 8002828:	60bb      	str	r3, [r7, #8]
  return(result);
 800282a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800282e:	2301      	movs	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f383 8810 	msr	PRIMASK, r3
}
 8002838:	46c0      	nop			@ (mov r8, r8)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2110      	movs	r1, #16
 8002846:	438a      	bics	r2, r1
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f383 8810 	msr	PRIMASK, r3
}
 8002854:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2280      	movs	r2, #128	@ 0x80
 800285a:	2120      	movs	r1, #32
 800285c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b00e      	add	sp, #56	@ 0x38
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	fffffedf 	.word	0xfffffedf

08002878 <sniprintf>:
 8002878:	b40c      	push	{r2, r3}
 800287a:	b530      	push	{r4, r5, lr}
 800287c:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <sniprintf+0x68>)
 800287e:	000c      	movs	r4, r1
 8002880:	681d      	ldr	r5, [r3, #0]
 8002882:	b09d      	sub	sp, #116	@ 0x74
 8002884:	2900      	cmp	r1, #0
 8002886:	da08      	bge.n	800289a <sniprintf+0x22>
 8002888:	238b      	movs	r3, #139	@ 0x8b
 800288a:	2001      	movs	r0, #1
 800288c:	602b      	str	r3, [r5, #0]
 800288e:	4240      	negs	r0, r0
 8002890:	b01d      	add	sp, #116	@ 0x74
 8002892:	bc30      	pop	{r4, r5}
 8002894:	bc08      	pop	{r3}
 8002896:	b002      	add	sp, #8
 8002898:	4718      	bx	r3
 800289a:	2382      	movs	r3, #130	@ 0x82
 800289c:	466a      	mov	r2, sp
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	8293      	strh	r3, [r2, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	9002      	str	r0, [sp, #8]
 80028a6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80028a8:	9006      	str	r0, [sp, #24]
 80028aa:	4299      	cmp	r1, r3
 80028ac:	d000      	beq.n	80028b0 <sniprintf+0x38>
 80028ae:	1e4b      	subs	r3, r1, #1
 80028b0:	9304      	str	r3, [sp, #16]
 80028b2:	9307      	str	r3, [sp, #28]
 80028b4:	2301      	movs	r3, #1
 80028b6:	466a      	mov	r2, sp
 80028b8:	425b      	negs	r3, r3
 80028ba:	82d3      	strh	r3, [r2, #22]
 80028bc:	0028      	movs	r0, r5
 80028be:	ab21      	add	r3, sp, #132	@ 0x84
 80028c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80028c2:	a902      	add	r1, sp, #8
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	f000 f99d 	bl	8002c04 <_svfiprintf_r>
 80028ca:	1c43      	adds	r3, r0, #1
 80028cc:	da01      	bge.n	80028d2 <sniprintf+0x5a>
 80028ce:	238b      	movs	r3, #139	@ 0x8b
 80028d0:	602b      	str	r3, [r5, #0]
 80028d2:	2c00      	cmp	r4, #0
 80028d4:	d0dc      	beq.n	8002890 <sniprintf+0x18>
 80028d6:	2200      	movs	r2, #0
 80028d8:	9b02      	ldr	r3, [sp, #8]
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e7d8      	b.n	8002890 <sniprintf+0x18>
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	2000006c 	.word	0x2000006c

080028e4 <memset>:
 80028e4:	0003      	movs	r3, r0
 80028e6:	1882      	adds	r2, r0, r2
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d100      	bne.n	80028ee <memset+0xa>
 80028ec:	4770      	bx	lr
 80028ee:	7019      	strb	r1, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	e7f9      	b.n	80028e8 <memset+0x4>

080028f4 <__errno>:
 80028f4:	4b01      	ldr	r3, [pc, #4]	@ (80028fc <__errno+0x8>)
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	4770      	bx	lr
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	2000006c 	.word	0x2000006c

08002900 <__libc_init_array>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	2600      	movs	r6, #0
 8002904:	4c0c      	ldr	r4, [pc, #48]	@ (8002938 <__libc_init_array+0x38>)
 8002906:	4d0d      	ldr	r5, [pc, #52]	@ (800293c <__libc_init_array+0x3c>)
 8002908:	1b64      	subs	r4, r4, r5
 800290a:	10a4      	asrs	r4, r4, #2
 800290c:	42a6      	cmp	r6, r4
 800290e:	d109      	bne.n	8002924 <__libc_init_array+0x24>
 8002910:	2600      	movs	r6, #0
 8002912:	f000 fc61 	bl	80031d8 <_init>
 8002916:	4c0a      	ldr	r4, [pc, #40]	@ (8002940 <__libc_init_array+0x40>)
 8002918:	4d0a      	ldr	r5, [pc, #40]	@ (8002944 <__libc_init_array+0x44>)
 800291a:	1b64      	subs	r4, r4, r5
 800291c:	10a4      	asrs	r4, r4, #2
 800291e:	42a6      	cmp	r6, r4
 8002920:	d105      	bne.n	800292e <__libc_init_array+0x2e>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	00b3      	lsls	r3, r6, #2
 8002926:	58eb      	ldr	r3, [r5, r3]
 8002928:	4798      	blx	r3
 800292a:	3601      	adds	r6, #1
 800292c:	e7ee      	b.n	800290c <__libc_init_array+0xc>
 800292e:	00b3      	lsls	r3, r6, #2
 8002930:	58eb      	ldr	r3, [r5, r3]
 8002932:	4798      	blx	r3
 8002934:	3601      	adds	r6, #1
 8002936:	e7f2      	b.n	800291e <__libc_init_array+0x1e>
 8002938:	080036b0 	.word	0x080036b0
 800293c:	080036b0 	.word	0x080036b0
 8002940:	080036b4 	.word	0x080036b4
 8002944:	080036b0 	.word	0x080036b0

08002948 <__retarget_lock_acquire_recursive>:
 8002948:	4770      	bx	lr

0800294a <__retarget_lock_release_recursive>:
 800294a:	4770      	bx	lr

0800294c <_free_r>:
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	0005      	movs	r5, r0
 8002950:	1e0c      	subs	r4, r1, #0
 8002952:	d010      	beq.n	8002976 <_free_r+0x2a>
 8002954:	3c04      	subs	r4, #4
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	da00      	bge.n	800295e <_free_r+0x12>
 800295c:	18e4      	adds	r4, r4, r3
 800295e:	0028      	movs	r0, r5
 8002960:	f000 f8e0 	bl	8002b24 <__malloc_lock>
 8002964:	4a1d      	ldr	r2, [pc, #116]	@ (80029dc <_free_r+0x90>)
 8002966:	6813      	ldr	r3, [r2, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <_free_r+0x2c>
 800296c:	6063      	str	r3, [r4, #4]
 800296e:	6014      	str	r4, [r2, #0]
 8002970:	0028      	movs	r0, r5
 8002972:	f000 f8df 	bl	8002b34 <__malloc_unlock>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	42a3      	cmp	r3, r4
 800297a:	d908      	bls.n	800298e <_free_r+0x42>
 800297c:	6820      	ldr	r0, [r4, #0]
 800297e:	1821      	adds	r1, r4, r0
 8002980:	428b      	cmp	r3, r1
 8002982:	d1f3      	bne.n	800296c <_free_r+0x20>
 8002984:	6819      	ldr	r1, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	1809      	adds	r1, r1, r0
 800298a:	6021      	str	r1, [r4, #0]
 800298c:	e7ee      	b.n	800296c <_free_r+0x20>
 800298e:	001a      	movs	r2, r3
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <_free_r+0x4e>
 8002996:	42a3      	cmp	r3, r4
 8002998:	d9f9      	bls.n	800298e <_free_r+0x42>
 800299a:	6811      	ldr	r1, [r2, #0]
 800299c:	1850      	adds	r0, r2, r1
 800299e:	42a0      	cmp	r0, r4
 80029a0:	d10b      	bne.n	80029ba <_free_r+0x6e>
 80029a2:	6820      	ldr	r0, [r4, #0]
 80029a4:	1809      	adds	r1, r1, r0
 80029a6:	1850      	adds	r0, r2, r1
 80029a8:	6011      	str	r1, [r2, #0]
 80029aa:	4283      	cmp	r3, r0
 80029ac:	d1e0      	bne.n	8002970 <_free_r+0x24>
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	1841      	adds	r1, r0, r1
 80029b4:	6011      	str	r1, [r2, #0]
 80029b6:	6053      	str	r3, [r2, #4]
 80029b8:	e7da      	b.n	8002970 <_free_r+0x24>
 80029ba:	42a0      	cmp	r0, r4
 80029bc:	d902      	bls.n	80029c4 <_free_r+0x78>
 80029be:	230c      	movs	r3, #12
 80029c0:	602b      	str	r3, [r5, #0]
 80029c2:	e7d5      	b.n	8002970 <_free_r+0x24>
 80029c4:	6820      	ldr	r0, [r4, #0]
 80029c6:	1821      	adds	r1, r4, r0
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d103      	bne.n	80029d4 <_free_r+0x88>
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	1809      	adds	r1, r1, r0
 80029d2:	6021      	str	r1, [r4, #0]
 80029d4:	6063      	str	r3, [r4, #4]
 80029d6:	6054      	str	r4, [r2, #4]
 80029d8:	e7ca      	b.n	8002970 <_free_r+0x24>
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	20001928 	.word	0x20001928

080029e0 <sbrk_aligned>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	4e0f      	ldr	r6, [pc, #60]	@ (8002a20 <sbrk_aligned+0x40>)
 80029e4:	000d      	movs	r5, r1
 80029e6:	6831      	ldr	r1, [r6, #0]
 80029e8:	0004      	movs	r4, r0
 80029ea:	2900      	cmp	r1, #0
 80029ec:	d102      	bne.n	80029f4 <sbrk_aligned+0x14>
 80029ee:	f000 fb95 	bl	800311c <_sbrk_r>
 80029f2:	6030      	str	r0, [r6, #0]
 80029f4:	0029      	movs	r1, r5
 80029f6:	0020      	movs	r0, r4
 80029f8:	f000 fb90 	bl	800311c <_sbrk_r>
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	d103      	bne.n	8002a08 <sbrk_aligned+0x28>
 8002a00:	2501      	movs	r5, #1
 8002a02:	426d      	negs	r5, r5
 8002a04:	0028      	movs	r0, r5
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	2303      	movs	r3, #3
 8002a0a:	1cc5      	adds	r5, r0, #3
 8002a0c:	439d      	bics	r5, r3
 8002a0e:	42a8      	cmp	r0, r5
 8002a10:	d0f8      	beq.n	8002a04 <sbrk_aligned+0x24>
 8002a12:	1a29      	subs	r1, r5, r0
 8002a14:	0020      	movs	r0, r4
 8002a16:	f000 fb81 	bl	800311c <_sbrk_r>
 8002a1a:	3001      	adds	r0, #1
 8002a1c:	d1f2      	bne.n	8002a04 <sbrk_aligned+0x24>
 8002a1e:	e7ef      	b.n	8002a00 <sbrk_aligned+0x20>
 8002a20:	20001924 	.word	0x20001924

08002a24 <_malloc_r>:
 8002a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a26:	2203      	movs	r2, #3
 8002a28:	1ccb      	adds	r3, r1, #3
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	3308      	adds	r3, #8
 8002a2e:	0005      	movs	r5, r0
 8002a30:	001f      	movs	r7, r3
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d234      	bcs.n	8002aa0 <_malloc_r+0x7c>
 8002a36:	270c      	movs	r7, #12
 8002a38:	42b9      	cmp	r1, r7
 8002a3a:	d833      	bhi.n	8002aa4 <_malloc_r+0x80>
 8002a3c:	0028      	movs	r0, r5
 8002a3e:	f000 f871 	bl	8002b24 <__malloc_lock>
 8002a42:	4e37      	ldr	r6, [pc, #220]	@ (8002b20 <_malloc_r+0xfc>)
 8002a44:	6833      	ldr	r3, [r6, #0]
 8002a46:	001c      	movs	r4, r3
 8002a48:	2c00      	cmp	r4, #0
 8002a4a:	d12f      	bne.n	8002aac <_malloc_r+0x88>
 8002a4c:	0039      	movs	r1, r7
 8002a4e:	0028      	movs	r0, r5
 8002a50:	f7ff ffc6 	bl	80029e0 <sbrk_aligned>
 8002a54:	0004      	movs	r4, r0
 8002a56:	1c43      	adds	r3, r0, #1
 8002a58:	d15f      	bne.n	8002b1a <_malloc_r+0xf6>
 8002a5a:	6834      	ldr	r4, [r6, #0]
 8002a5c:	9400      	str	r4, [sp, #0]
 8002a5e:	9b00      	ldr	r3, [sp, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d14a      	bne.n	8002afa <_malloc_r+0xd6>
 8002a64:	2c00      	cmp	r4, #0
 8002a66:	d052      	beq.n	8002b0e <_malloc_r+0xea>
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	0028      	movs	r0, r5
 8002a6c:	18e3      	adds	r3, r4, r3
 8002a6e:	9900      	ldr	r1, [sp, #0]
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	f000 fb53 	bl	800311c <_sbrk_r>
 8002a76:	9b01      	ldr	r3, [sp, #4]
 8002a78:	4283      	cmp	r3, r0
 8002a7a:	d148      	bne.n	8002b0e <_malloc_r+0xea>
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	0028      	movs	r0, r5
 8002a80:	1aff      	subs	r7, r7, r3
 8002a82:	0039      	movs	r1, r7
 8002a84:	f7ff ffac 	bl	80029e0 <sbrk_aligned>
 8002a88:	3001      	adds	r0, #1
 8002a8a:	d040      	beq.n	8002b0e <_malloc_r+0xea>
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	19db      	adds	r3, r3, r7
 8002a90:	6023      	str	r3, [r4, #0]
 8002a92:	6833      	ldr	r3, [r6, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	2a00      	cmp	r2, #0
 8002a98:	d133      	bne.n	8002b02 <_malloc_r+0xde>
 8002a9a:	9b00      	ldr	r3, [sp, #0]
 8002a9c:	6033      	str	r3, [r6, #0]
 8002a9e:	e019      	b.n	8002ad4 <_malloc_r+0xb0>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	dac9      	bge.n	8002a38 <_malloc_r+0x14>
 8002aa4:	230c      	movs	r3, #12
 8002aa6:	602b      	str	r3, [r5, #0]
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002aac:	6821      	ldr	r1, [r4, #0]
 8002aae:	1bc9      	subs	r1, r1, r7
 8002ab0:	d420      	bmi.n	8002af4 <_malloc_r+0xd0>
 8002ab2:	290b      	cmp	r1, #11
 8002ab4:	d90a      	bls.n	8002acc <_malloc_r+0xa8>
 8002ab6:	19e2      	adds	r2, r4, r7
 8002ab8:	6027      	str	r7, [r4, #0]
 8002aba:	42a3      	cmp	r3, r4
 8002abc:	d104      	bne.n	8002ac8 <_malloc_r+0xa4>
 8002abe:	6032      	str	r2, [r6, #0]
 8002ac0:	6863      	ldr	r3, [r4, #4]
 8002ac2:	6011      	str	r1, [r2, #0]
 8002ac4:	6053      	str	r3, [r2, #4]
 8002ac6:	e005      	b.n	8002ad4 <_malloc_r+0xb0>
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	e7f9      	b.n	8002ac0 <_malloc_r+0x9c>
 8002acc:	6862      	ldr	r2, [r4, #4]
 8002ace:	42a3      	cmp	r3, r4
 8002ad0:	d10e      	bne.n	8002af0 <_malloc_r+0xcc>
 8002ad2:	6032      	str	r2, [r6, #0]
 8002ad4:	0028      	movs	r0, r5
 8002ad6:	f000 f82d 	bl	8002b34 <__malloc_unlock>
 8002ada:	0020      	movs	r0, r4
 8002adc:	2207      	movs	r2, #7
 8002ade:	300b      	adds	r0, #11
 8002ae0:	1d23      	adds	r3, r4, #4
 8002ae2:	4390      	bics	r0, r2
 8002ae4:	1ac2      	subs	r2, r0, r3
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d0df      	beq.n	8002aaa <_malloc_r+0x86>
 8002aea:	1a1b      	subs	r3, r3, r0
 8002aec:	50a3      	str	r3, [r4, r2]
 8002aee:	e7dc      	b.n	8002aaa <_malloc_r+0x86>
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	e7ef      	b.n	8002ad4 <_malloc_r+0xb0>
 8002af4:	0023      	movs	r3, r4
 8002af6:	6864      	ldr	r4, [r4, #4]
 8002af8:	e7a6      	b.n	8002a48 <_malloc_r+0x24>
 8002afa:	9c00      	ldr	r4, [sp, #0]
 8002afc:	6863      	ldr	r3, [r4, #4]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	e7ad      	b.n	8002a5e <_malloc_r+0x3a>
 8002b02:	001a      	movs	r2, r3
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	42a3      	cmp	r3, r4
 8002b08:	d1fb      	bne.n	8002b02 <_malloc_r+0xde>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e7da      	b.n	8002ac4 <_malloc_r+0xa0>
 8002b0e:	230c      	movs	r3, #12
 8002b10:	0028      	movs	r0, r5
 8002b12:	602b      	str	r3, [r5, #0]
 8002b14:	f000 f80e 	bl	8002b34 <__malloc_unlock>
 8002b18:	e7c6      	b.n	8002aa8 <_malloc_r+0x84>
 8002b1a:	6007      	str	r7, [r0, #0]
 8002b1c:	e7da      	b.n	8002ad4 <_malloc_r+0xb0>
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	20001928 	.word	0x20001928

08002b24 <__malloc_lock>:
 8002b24:	b510      	push	{r4, lr}
 8002b26:	4802      	ldr	r0, [pc, #8]	@ (8002b30 <__malloc_lock+0xc>)
 8002b28:	f7ff ff0e 	bl	8002948 <__retarget_lock_acquire_recursive>
 8002b2c:	bd10      	pop	{r4, pc}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	20001920 	.word	0x20001920

08002b34 <__malloc_unlock>:
 8002b34:	b510      	push	{r4, lr}
 8002b36:	4802      	ldr	r0, [pc, #8]	@ (8002b40 <__malloc_unlock+0xc>)
 8002b38:	f7ff ff07 	bl	800294a <__retarget_lock_release_recursive>
 8002b3c:	bd10      	pop	{r4, pc}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	20001920 	.word	0x20001920

08002b44 <__ssputs_r>:
 8002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b46:	688e      	ldr	r6, [r1, #8]
 8002b48:	b085      	sub	sp, #20
 8002b4a:	001f      	movs	r7, r3
 8002b4c:	000c      	movs	r4, r1
 8002b4e:	680b      	ldr	r3, [r1, #0]
 8002b50:	9002      	str	r0, [sp, #8]
 8002b52:	9203      	str	r2, [sp, #12]
 8002b54:	42be      	cmp	r6, r7
 8002b56:	d830      	bhi.n	8002bba <__ssputs_r+0x76>
 8002b58:	210c      	movs	r1, #12
 8002b5a:	5e62      	ldrsh	r2, [r4, r1]
 8002b5c:	2190      	movs	r1, #144	@ 0x90
 8002b5e:	00c9      	lsls	r1, r1, #3
 8002b60:	420a      	tst	r2, r1
 8002b62:	d028      	beq.n	8002bb6 <__ssputs_r+0x72>
 8002b64:	2003      	movs	r0, #3
 8002b66:	6921      	ldr	r1, [r4, #16]
 8002b68:	1a5b      	subs	r3, r3, r1
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	6963      	ldr	r3, [r4, #20]
 8002b6e:	4343      	muls	r3, r0
 8002b70:	9801      	ldr	r0, [sp, #4]
 8002b72:	0fdd      	lsrs	r5, r3, #31
 8002b74:	18ed      	adds	r5, r5, r3
 8002b76:	1c7b      	adds	r3, r7, #1
 8002b78:	181b      	adds	r3, r3, r0
 8002b7a:	106d      	asrs	r5, r5, #1
 8002b7c:	42ab      	cmp	r3, r5
 8002b7e:	d900      	bls.n	8002b82 <__ssputs_r+0x3e>
 8002b80:	001d      	movs	r5, r3
 8002b82:	0552      	lsls	r2, r2, #21
 8002b84:	d528      	bpl.n	8002bd8 <__ssputs_r+0x94>
 8002b86:	0029      	movs	r1, r5
 8002b88:	9802      	ldr	r0, [sp, #8]
 8002b8a:	f7ff ff4b 	bl	8002a24 <_malloc_r>
 8002b8e:	1e06      	subs	r6, r0, #0
 8002b90:	d02c      	beq.n	8002bec <__ssputs_r+0xa8>
 8002b92:	9a01      	ldr	r2, [sp, #4]
 8002b94:	6921      	ldr	r1, [r4, #16]
 8002b96:	f000 fade 	bl	8003156 <memcpy>
 8002b9a:	89a2      	ldrh	r2, [r4, #12]
 8002b9c:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <__ssputs_r+0xbc>)
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	81a3      	strh	r3, [r4, #12]
 8002ba6:	9b01      	ldr	r3, [sp, #4]
 8002ba8:	6126      	str	r6, [r4, #16]
 8002baa:	18f6      	adds	r6, r6, r3
 8002bac:	6026      	str	r6, [r4, #0]
 8002bae:	003e      	movs	r6, r7
 8002bb0:	6165      	str	r5, [r4, #20]
 8002bb2:	1aed      	subs	r5, r5, r3
 8002bb4:	60a5      	str	r5, [r4, #8]
 8002bb6:	42be      	cmp	r6, r7
 8002bb8:	d900      	bls.n	8002bbc <__ssputs_r+0x78>
 8002bba:	003e      	movs	r6, r7
 8002bbc:	0032      	movs	r2, r6
 8002bbe:	9903      	ldr	r1, [sp, #12]
 8002bc0:	6820      	ldr	r0, [r4, #0]
 8002bc2:	f000 fa99 	bl	80030f8 <memmove>
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	68a3      	ldr	r3, [r4, #8]
 8002bca:	1b9b      	subs	r3, r3, r6
 8002bcc:	60a3      	str	r3, [r4, #8]
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	199b      	adds	r3, r3, r6
 8002bd2:	6023      	str	r3, [r4, #0]
 8002bd4:	b005      	add	sp, #20
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd8:	002a      	movs	r2, r5
 8002bda:	9802      	ldr	r0, [sp, #8]
 8002bdc:	f000 fac4 	bl	8003168 <_realloc_r>
 8002be0:	1e06      	subs	r6, r0, #0
 8002be2:	d1e0      	bne.n	8002ba6 <__ssputs_r+0x62>
 8002be4:	6921      	ldr	r1, [r4, #16]
 8002be6:	9802      	ldr	r0, [sp, #8]
 8002be8:	f7ff feb0 	bl	800294c <_free_r>
 8002bec:	230c      	movs	r3, #12
 8002bee:	2001      	movs	r0, #1
 8002bf0:	9a02      	ldr	r2, [sp, #8]
 8002bf2:	4240      	negs	r0, r0
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	89a2      	ldrh	r2, [r4, #12]
 8002bf8:	3334      	adds	r3, #52	@ 0x34
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	81a3      	strh	r3, [r4, #12]
 8002bfe:	e7e9      	b.n	8002bd4 <__ssputs_r+0x90>
 8002c00:	fffffb7f 	.word	0xfffffb7f

08002c04 <_svfiprintf_r>:
 8002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c06:	b0a1      	sub	sp, #132	@ 0x84
 8002c08:	9003      	str	r0, [sp, #12]
 8002c0a:	001d      	movs	r5, r3
 8002c0c:	898b      	ldrh	r3, [r1, #12]
 8002c0e:	000f      	movs	r7, r1
 8002c10:	0016      	movs	r6, r2
 8002c12:	061b      	lsls	r3, r3, #24
 8002c14:	d511      	bpl.n	8002c3a <_svfiprintf_r+0x36>
 8002c16:	690b      	ldr	r3, [r1, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10e      	bne.n	8002c3a <_svfiprintf_r+0x36>
 8002c1c:	2140      	movs	r1, #64	@ 0x40
 8002c1e:	f7ff ff01 	bl	8002a24 <_malloc_r>
 8002c22:	6038      	str	r0, [r7, #0]
 8002c24:	6138      	str	r0, [r7, #16]
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d105      	bne.n	8002c36 <_svfiprintf_r+0x32>
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	9a03      	ldr	r2, [sp, #12]
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	2001      	movs	r0, #1
 8002c32:	4240      	negs	r0, r0
 8002c34:	e0cf      	b.n	8002dd6 <_svfiprintf_r+0x1d2>
 8002c36:	2340      	movs	r3, #64	@ 0x40
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	ac08      	add	r4, sp, #32
 8002c3e:	6163      	str	r3, [r4, #20]
 8002c40:	3320      	adds	r3, #32
 8002c42:	7663      	strb	r3, [r4, #25]
 8002c44:	3310      	adds	r3, #16
 8002c46:	76a3      	strb	r3, [r4, #26]
 8002c48:	9507      	str	r5, [sp, #28]
 8002c4a:	0035      	movs	r5, r6
 8002c4c:	782b      	ldrb	r3, [r5, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <_svfiprintf_r+0x52>
 8002c52:	2b25      	cmp	r3, #37	@ 0x25
 8002c54:	d148      	bne.n	8002ce8 <_svfiprintf_r+0xe4>
 8002c56:	1bab      	subs	r3, r5, r6
 8002c58:	9305      	str	r3, [sp, #20]
 8002c5a:	42b5      	cmp	r5, r6
 8002c5c:	d00b      	beq.n	8002c76 <_svfiprintf_r+0x72>
 8002c5e:	0032      	movs	r2, r6
 8002c60:	0039      	movs	r1, r7
 8002c62:	9803      	ldr	r0, [sp, #12]
 8002c64:	f7ff ff6e 	bl	8002b44 <__ssputs_r>
 8002c68:	3001      	adds	r0, #1
 8002c6a:	d100      	bne.n	8002c6e <_svfiprintf_r+0x6a>
 8002c6c:	e0ae      	b.n	8002dcc <_svfiprintf_r+0x1c8>
 8002c6e:	6963      	ldr	r3, [r4, #20]
 8002c70:	9a05      	ldr	r2, [sp, #20]
 8002c72:	189b      	adds	r3, r3, r2
 8002c74:	6163      	str	r3, [r4, #20]
 8002c76:	782b      	ldrb	r3, [r5, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d100      	bne.n	8002c7e <_svfiprintf_r+0x7a>
 8002c7c:	e0a6      	b.n	8002dcc <_svfiprintf_r+0x1c8>
 8002c7e:	2201      	movs	r2, #1
 8002c80:	2300      	movs	r3, #0
 8002c82:	4252      	negs	r2, r2
 8002c84:	6062      	str	r2, [r4, #4]
 8002c86:	a904      	add	r1, sp, #16
 8002c88:	3254      	adds	r2, #84	@ 0x54
 8002c8a:	1852      	adds	r2, r2, r1
 8002c8c:	1c6e      	adds	r6, r5, #1
 8002c8e:	6023      	str	r3, [r4, #0]
 8002c90:	60e3      	str	r3, [r4, #12]
 8002c92:	60a3      	str	r3, [r4, #8]
 8002c94:	7013      	strb	r3, [r2, #0]
 8002c96:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002c98:	4b54      	ldr	r3, [pc, #336]	@ (8002dec <_svfiprintf_r+0x1e8>)
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	7831      	ldrb	r1, [r6, #0]
 8002ca0:	9305      	str	r3, [sp, #20]
 8002ca2:	f000 fa4d 	bl	8003140 <memchr>
 8002ca6:	1c75      	adds	r5, r6, #1
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d11f      	bne.n	8002cec <_svfiprintf_r+0xe8>
 8002cac:	6822      	ldr	r2, [r4, #0]
 8002cae:	06d3      	lsls	r3, r2, #27
 8002cb0:	d504      	bpl.n	8002cbc <_svfiprintf_r+0xb8>
 8002cb2:	2353      	movs	r3, #83	@ 0x53
 8002cb4:	a904      	add	r1, sp, #16
 8002cb6:	185b      	adds	r3, r3, r1
 8002cb8:	2120      	movs	r1, #32
 8002cba:	7019      	strb	r1, [r3, #0]
 8002cbc:	0713      	lsls	r3, r2, #28
 8002cbe:	d504      	bpl.n	8002cca <_svfiprintf_r+0xc6>
 8002cc0:	2353      	movs	r3, #83	@ 0x53
 8002cc2:	a904      	add	r1, sp, #16
 8002cc4:	185b      	adds	r3, r3, r1
 8002cc6:	212b      	movs	r1, #43	@ 0x2b
 8002cc8:	7019      	strb	r1, [r3, #0]
 8002cca:	7833      	ldrb	r3, [r6, #0]
 8002ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cce:	d016      	beq.n	8002cfe <_svfiprintf_r+0xfa>
 8002cd0:	0035      	movs	r5, r6
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	200a      	movs	r0, #10
 8002cd6:	68e3      	ldr	r3, [r4, #12]
 8002cd8:	782a      	ldrb	r2, [r5, #0]
 8002cda:	1c6e      	adds	r6, r5, #1
 8002cdc:	3a30      	subs	r2, #48	@ 0x30
 8002cde:	2a09      	cmp	r2, #9
 8002ce0:	d950      	bls.n	8002d84 <_svfiprintf_r+0x180>
 8002ce2:	2900      	cmp	r1, #0
 8002ce4:	d111      	bne.n	8002d0a <_svfiprintf_r+0x106>
 8002ce6:	e017      	b.n	8002d18 <_svfiprintf_r+0x114>
 8002ce8:	3501      	adds	r5, #1
 8002cea:	e7af      	b.n	8002c4c <_svfiprintf_r+0x48>
 8002cec:	9b05      	ldr	r3, [sp, #20]
 8002cee:	6822      	ldr	r2, [r4, #0]
 8002cf0:	1ac0      	subs	r0, r0, r3
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	4083      	lsls	r3, r0
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	002e      	movs	r6, r5
 8002cfa:	6023      	str	r3, [r4, #0]
 8002cfc:	e7cc      	b.n	8002c98 <_svfiprintf_r+0x94>
 8002cfe:	9b07      	ldr	r3, [sp, #28]
 8002d00:	1d19      	adds	r1, r3, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	9107      	str	r1, [sp, #28]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	db01      	blt.n	8002d0e <_svfiprintf_r+0x10a>
 8002d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d0c:	e004      	b.n	8002d18 <_svfiprintf_r+0x114>
 8002d0e:	425b      	negs	r3, r3
 8002d10:	60e3      	str	r3, [r4, #12]
 8002d12:	2302      	movs	r3, #2
 8002d14:	4313      	orrs	r3, r2
 8002d16:	6023      	str	r3, [r4, #0]
 8002d18:	782b      	ldrb	r3, [r5, #0]
 8002d1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d1c:	d10c      	bne.n	8002d38 <_svfiprintf_r+0x134>
 8002d1e:	786b      	ldrb	r3, [r5, #1]
 8002d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d22:	d134      	bne.n	8002d8e <_svfiprintf_r+0x18a>
 8002d24:	9b07      	ldr	r3, [sp, #28]
 8002d26:	3502      	adds	r5, #2
 8002d28:	1d1a      	adds	r2, r3, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	9207      	str	r2, [sp, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da01      	bge.n	8002d36 <_svfiprintf_r+0x132>
 8002d32:	2301      	movs	r3, #1
 8002d34:	425b      	negs	r3, r3
 8002d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d38:	4e2d      	ldr	r6, [pc, #180]	@ (8002df0 <_svfiprintf_r+0x1ec>)
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	0030      	movs	r0, r6
 8002d3e:	7829      	ldrb	r1, [r5, #0]
 8002d40:	f000 f9fe 	bl	8003140 <memchr>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d006      	beq.n	8002d56 <_svfiprintf_r+0x152>
 8002d48:	2340      	movs	r3, #64	@ 0x40
 8002d4a:	1b80      	subs	r0, r0, r6
 8002d4c:	4083      	lsls	r3, r0
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	3501      	adds	r5, #1
 8002d52:	4313      	orrs	r3, r2
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	7829      	ldrb	r1, [r5, #0]
 8002d58:	2206      	movs	r2, #6
 8002d5a:	4826      	ldr	r0, [pc, #152]	@ (8002df4 <_svfiprintf_r+0x1f0>)
 8002d5c:	1c6e      	adds	r6, r5, #1
 8002d5e:	7621      	strb	r1, [r4, #24]
 8002d60:	f000 f9ee 	bl	8003140 <memchr>
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d038      	beq.n	8002dda <_svfiprintf_r+0x1d6>
 8002d68:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <_svfiprintf_r+0x1f4>)
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d122      	bne.n	8002db4 <_svfiprintf_r+0x1b0>
 8002d6e:	2207      	movs	r2, #7
 8002d70:	9b07      	ldr	r3, [sp, #28]
 8002d72:	3307      	adds	r3, #7
 8002d74:	4393      	bics	r3, r2
 8002d76:	3308      	adds	r3, #8
 8002d78:	9307      	str	r3, [sp, #28]
 8002d7a:	6963      	ldr	r3, [r4, #20]
 8002d7c:	9a04      	ldr	r2, [sp, #16]
 8002d7e:	189b      	adds	r3, r3, r2
 8002d80:	6163      	str	r3, [r4, #20]
 8002d82:	e762      	b.n	8002c4a <_svfiprintf_r+0x46>
 8002d84:	4343      	muls	r3, r0
 8002d86:	0035      	movs	r5, r6
 8002d88:	2101      	movs	r1, #1
 8002d8a:	189b      	adds	r3, r3, r2
 8002d8c:	e7a4      	b.n	8002cd8 <_svfiprintf_r+0xd4>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	200a      	movs	r0, #10
 8002d92:	0019      	movs	r1, r3
 8002d94:	3501      	adds	r5, #1
 8002d96:	6063      	str	r3, [r4, #4]
 8002d98:	782a      	ldrb	r2, [r5, #0]
 8002d9a:	1c6e      	adds	r6, r5, #1
 8002d9c:	3a30      	subs	r2, #48	@ 0x30
 8002d9e:	2a09      	cmp	r2, #9
 8002da0:	d903      	bls.n	8002daa <_svfiprintf_r+0x1a6>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0c8      	beq.n	8002d38 <_svfiprintf_r+0x134>
 8002da6:	9109      	str	r1, [sp, #36]	@ 0x24
 8002da8:	e7c6      	b.n	8002d38 <_svfiprintf_r+0x134>
 8002daa:	4341      	muls	r1, r0
 8002dac:	0035      	movs	r5, r6
 8002dae:	2301      	movs	r3, #1
 8002db0:	1889      	adds	r1, r1, r2
 8002db2:	e7f1      	b.n	8002d98 <_svfiprintf_r+0x194>
 8002db4:	aa07      	add	r2, sp, #28
 8002db6:	9200      	str	r2, [sp, #0]
 8002db8:	0021      	movs	r1, r4
 8002dba:	003a      	movs	r2, r7
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <_svfiprintf_r+0x1f8>)
 8002dbe:	9803      	ldr	r0, [sp, #12]
 8002dc0:	e000      	b.n	8002dc4 <_svfiprintf_r+0x1c0>
 8002dc2:	bf00      	nop
 8002dc4:	9004      	str	r0, [sp, #16]
 8002dc6:	9b04      	ldr	r3, [sp, #16]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	d1d6      	bne.n	8002d7a <_svfiprintf_r+0x176>
 8002dcc:	89bb      	ldrh	r3, [r7, #12]
 8002dce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002dd0:	065b      	lsls	r3, r3, #25
 8002dd2:	d500      	bpl.n	8002dd6 <_svfiprintf_r+0x1d2>
 8002dd4:	e72c      	b.n	8002c30 <_svfiprintf_r+0x2c>
 8002dd6:	b021      	add	sp, #132	@ 0x84
 8002dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dda:	aa07      	add	r2, sp, #28
 8002ddc:	9200      	str	r2, [sp, #0]
 8002dde:	0021      	movs	r1, r4
 8002de0:	003a      	movs	r2, r7
 8002de2:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <_svfiprintf_r+0x1f8>)
 8002de4:	9803      	ldr	r0, [sp, #12]
 8002de6:	f000 f87b 	bl	8002ee0 <_printf_i>
 8002dea:	e7eb      	b.n	8002dc4 <_svfiprintf_r+0x1c0>
 8002dec:	0800367c 	.word	0x0800367c
 8002df0:	08003682 	.word	0x08003682
 8002df4:	08003686 	.word	0x08003686
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	08002b45 	.word	0x08002b45

08002e00 <_printf_common>:
 8002e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e02:	0016      	movs	r6, r2
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	688a      	ldr	r2, [r1, #8]
 8002e08:	690b      	ldr	r3, [r1, #16]
 8002e0a:	000c      	movs	r4, r1
 8002e0c:	9000      	str	r0, [sp, #0]
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	da00      	bge.n	8002e14 <_printf_common+0x14>
 8002e12:	0013      	movs	r3, r2
 8002e14:	0022      	movs	r2, r4
 8002e16:	6033      	str	r3, [r6, #0]
 8002e18:	3243      	adds	r2, #67	@ 0x43
 8002e1a:	7812      	ldrb	r2, [r2, #0]
 8002e1c:	2a00      	cmp	r2, #0
 8002e1e:	d001      	beq.n	8002e24 <_printf_common+0x24>
 8002e20:	3301      	adds	r3, #1
 8002e22:	6033      	str	r3, [r6, #0]
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	069b      	lsls	r3, r3, #26
 8002e28:	d502      	bpl.n	8002e30 <_printf_common+0x30>
 8002e2a:	6833      	ldr	r3, [r6, #0]
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	6033      	str	r3, [r6, #0]
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	2306      	movs	r3, #6
 8002e34:	0015      	movs	r5, r2
 8002e36:	401d      	ands	r5, r3
 8002e38:	421a      	tst	r2, r3
 8002e3a:	d027      	beq.n	8002e8c <_printf_common+0x8c>
 8002e3c:	0023      	movs	r3, r4
 8002e3e:	3343      	adds	r3, #67	@ 0x43
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	1e5a      	subs	r2, r3, #1
 8002e44:	4193      	sbcs	r3, r2
 8002e46:	6822      	ldr	r2, [r4, #0]
 8002e48:	0692      	lsls	r2, r2, #26
 8002e4a:	d430      	bmi.n	8002eae <_printf_common+0xae>
 8002e4c:	0022      	movs	r2, r4
 8002e4e:	9901      	ldr	r1, [sp, #4]
 8002e50:	9800      	ldr	r0, [sp, #0]
 8002e52:	9d08      	ldr	r5, [sp, #32]
 8002e54:	3243      	adds	r2, #67	@ 0x43
 8002e56:	47a8      	blx	r5
 8002e58:	3001      	adds	r0, #1
 8002e5a:	d025      	beq.n	8002ea8 <_printf_common+0xa8>
 8002e5c:	2206      	movs	r2, #6
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	2500      	movs	r5, #0
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d105      	bne.n	8002e74 <_printf_common+0x74>
 8002e68:	6833      	ldr	r3, [r6, #0]
 8002e6a:	68e5      	ldr	r5, [r4, #12]
 8002e6c:	1aed      	subs	r5, r5, r3
 8002e6e:	43eb      	mvns	r3, r5
 8002e70:	17db      	asrs	r3, r3, #31
 8002e72:	401d      	ands	r5, r3
 8002e74:	68a3      	ldr	r3, [r4, #8]
 8002e76:	6922      	ldr	r2, [r4, #16]
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	dd01      	ble.n	8002e80 <_printf_common+0x80>
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	18ed      	adds	r5, r5, r3
 8002e80:	2600      	movs	r6, #0
 8002e82:	42b5      	cmp	r5, r6
 8002e84:	d120      	bne.n	8002ec8 <_printf_common+0xc8>
 8002e86:	2000      	movs	r0, #0
 8002e88:	e010      	b.n	8002eac <_printf_common+0xac>
 8002e8a:	3501      	adds	r5, #1
 8002e8c:	68e3      	ldr	r3, [r4, #12]
 8002e8e:	6832      	ldr	r2, [r6, #0]
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	42ab      	cmp	r3, r5
 8002e94:	ddd2      	ble.n	8002e3c <_printf_common+0x3c>
 8002e96:	0022      	movs	r2, r4
 8002e98:	2301      	movs	r3, #1
 8002e9a:	9901      	ldr	r1, [sp, #4]
 8002e9c:	9800      	ldr	r0, [sp, #0]
 8002e9e:	9f08      	ldr	r7, [sp, #32]
 8002ea0:	3219      	adds	r2, #25
 8002ea2:	47b8      	blx	r7
 8002ea4:	3001      	adds	r0, #1
 8002ea6:	d1f0      	bne.n	8002e8a <_printf_common+0x8a>
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	4240      	negs	r0, r0
 8002eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002eae:	2030      	movs	r0, #48	@ 0x30
 8002eb0:	18e1      	adds	r1, r4, r3
 8002eb2:	3143      	adds	r1, #67	@ 0x43
 8002eb4:	7008      	strb	r0, [r1, #0]
 8002eb6:	0021      	movs	r1, r4
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	3145      	adds	r1, #69	@ 0x45
 8002ebc:	7809      	ldrb	r1, [r1, #0]
 8002ebe:	18a2      	adds	r2, r4, r2
 8002ec0:	3243      	adds	r2, #67	@ 0x43
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	7011      	strb	r1, [r2, #0]
 8002ec6:	e7c1      	b.n	8002e4c <_printf_common+0x4c>
 8002ec8:	0022      	movs	r2, r4
 8002eca:	2301      	movs	r3, #1
 8002ecc:	9901      	ldr	r1, [sp, #4]
 8002ece:	9800      	ldr	r0, [sp, #0]
 8002ed0:	9f08      	ldr	r7, [sp, #32]
 8002ed2:	321a      	adds	r2, #26
 8002ed4:	47b8      	blx	r7
 8002ed6:	3001      	adds	r0, #1
 8002ed8:	d0e6      	beq.n	8002ea8 <_printf_common+0xa8>
 8002eda:	3601      	adds	r6, #1
 8002edc:	e7d1      	b.n	8002e82 <_printf_common+0x82>
	...

08002ee0 <_printf_i>:
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	b08b      	sub	sp, #44	@ 0x2c
 8002ee4:	9206      	str	r2, [sp, #24]
 8002ee6:	000a      	movs	r2, r1
 8002ee8:	3243      	adds	r2, #67	@ 0x43
 8002eea:	9307      	str	r3, [sp, #28]
 8002eec:	9005      	str	r0, [sp, #20]
 8002eee:	9203      	str	r2, [sp, #12]
 8002ef0:	7e0a      	ldrb	r2, [r1, #24]
 8002ef2:	000c      	movs	r4, r1
 8002ef4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002ef6:	2a78      	cmp	r2, #120	@ 0x78
 8002ef8:	d809      	bhi.n	8002f0e <_printf_i+0x2e>
 8002efa:	2a62      	cmp	r2, #98	@ 0x62
 8002efc:	d80b      	bhi.n	8002f16 <_printf_i+0x36>
 8002efe:	2a00      	cmp	r2, #0
 8002f00:	d100      	bne.n	8002f04 <_printf_i+0x24>
 8002f02:	e0ba      	b.n	800307a <_printf_i+0x19a>
 8002f04:	497a      	ldr	r1, [pc, #488]	@ (80030f0 <_printf_i+0x210>)
 8002f06:	9104      	str	r1, [sp, #16]
 8002f08:	2a58      	cmp	r2, #88	@ 0x58
 8002f0a:	d100      	bne.n	8002f0e <_printf_i+0x2e>
 8002f0c:	e08e      	b.n	800302c <_printf_i+0x14c>
 8002f0e:	0025      	movs	r5, r4
 8002f10:	3542      	adds	r5, #66	@ 0x42
 8002f12:	702a      	strb	r2, [r5, #0]
 8002f14:	e022      	b.n	8002f5c <_printf_i+0x7c>
 8002f16:	0010      	movs	r0, r2
 8002f18:	3863      	subs	r0, #99	@ 0x63
 8002f1a:	2815      	cmp	r0, #21
 8002f1c:	d8f7      	bhi.n	8002f0e <_printf_i+0x2e>
 8002f1e:	f7fd f8fb 	bl	8000118 <__gnu_thumb1_case_shi>
 8002f22:	0016      	.short	0x0016
 8002f24:	fff6001f 	.word	0xfff6001f
 8002f28:	fff6fff6 	.word	0xfff6fff6
 8002f2c:	001ffff6 	.word	0x001ffff6
 8002f30:	fff6fff6 	.word	0xfff6fff6
 8002f34:	fff6fff6 	.word	0xfff6fff6
 8002f38:	0036009f 	.word	0x0036009f
 8002f3c:	fff6007e 	.word	0xfff6007e
 8002f40:	00b0fff6 	.word	0x00b0fff6
 8002f44:	0036fff6 	.word	0x0036fff6
 8002f48:	fff6fff6 	.word	0xfff6fff6
 8002f4c:	0082      	.short	0x0082
 8002f4e:	0025      	movs	r5, r4
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	3542      	adds	r5, #66	@ 0x42
 8002f54:	1d11      	adds	r1, r2, #4
 8002f56:	6019      	str	r1, [r3, #0]
 8002f58:	6813      	ldr	r3, [r2, #0]
 8002f5a:	702b      	strb	r3, [r5, #0]
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e09e      	b.n	800309e <_printf_i+0x1be>
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	6809      	ldr	r1, [r1, #0]
 8002f64:	1d02      	adds	r2, r0, #4
 8002f66:	060d      	lsls	r5, r1, #24
 8002f68:	d50b      	bpl.n	8002f82 <_printf_i+0xa2>
 8002f6a:	6806      	ldr	r6, [r0, #0]
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	2e00      	cmp	r6, #0
 8002f70:	da03      	bge.n	8002f7a <_printf_i+0x9a>
 8002f72:	232d      	movs	r3, #45	@ 0x2d
 8002f74:	9a03      	ldr	r2, [sp, #12]
 8002f76:	4276      	negs	r6, r6
 8002f78:	7013      	strb	r3, [r2, #0]
 8002f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80030f0 <_printf_i+0x210>)
 8002f7c:	270a      	movs	r7, #10
 8002f7e:	9304      	str	r3, [sp, #16]
 8002f80:	e018      	b.n	8002fb4 <_printf_i+0xd4>
 8002f82:	6806      	ldr	r6, [r0, #0]
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	0649      	lsls	r1, r1, #25
 8002f88:	d5f1      	bpl.n	8002f6e <_printf_i+0x8e>
 8002f8a:	b236      	sxth	r6, r6
 8002f8c:	e7ef      	b.n	8002f6e <_printf_i+0x8e>
 8002f8e:	6808      	ldr	r0, [r1, #0]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	c940      	ldmia	r1!, {r6}
 8002f94:	0605      	lsls	r5, r0, #24
 8002f96:	d402      	bmi.n	8002f9e <_printf_i+0xbe>
 8002f98:	0640      	lsls	r0, r0, #25
 8002f9a:	d500      	bpl.n	8002f9e <_printf_i+0xbe>
 8002f9c:	b2b6      	uxth	r6, r6
 8002f9e:	6019      	str	r1, [r3, #0]
 8002fa0:	4b53      	ldr	r3, [pc, #332]	@ (80030f0 <_printf_i+0x210>)
 8002fa2:	270a      	movs	r7, #10
 8002fa4:	9304      	str	r3, [sp, #16]
 8002fa6:	2a6f      	cmp	r2, #111	@ 0x6f
 8002fa8:	d100      	bne.n	8002fac <_printf_i+0xcc>
 8002faa:	3f02      	subs	r7, #2
 8002fac:	0023      	movs	r3, r4
 8002fae:	2200      	movs	r2, #0
 8002fb0:	3343      	adds	r3, #67	@ 0x43
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	6863      	ldr	r3, [r4, #4]
 8002fb6:	60a3      	str	r3, [r4, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	db06      	blt.n	8002fca <_printf_i+0xea>
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	6822      	ldr	r2, [r4, #0]
 8002fc0:	9d03      	ldr	r5, [sp, #12]
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	6022      	str	r2, [r4, #0]
 8002fc6:	4333      	orrs	r3, r6
 8002fc8:	d00c      	beq.n	8002fe4 <_printf_i+0x104>
 8002fca:	9d03      	ldr	r5, [sp, #12]
 8002fcc:	0030      	movs	r0, r6
 8002fce:	0039      	movs	r1, r7
 8002fd0:	f7fd f932 	bl	8000238 <__aeabi_uidivmod>
 8002fd4:	9b04      	ldr	r3, [sp, #16]
 8002fd6:	3d01      	subs	r5, #1
 8002fd8:	5c5b      	ldrb	r3, [r3, r1]
 8002fda:	702b      	strb	r3, [r5, #0]
 8002fdc:	0033      	movs	r3, r6
 8002fde:	0006      	movs	r6, r0
 8002fe0:	429f      	cmp	r7, r3
 8002fe2:	d9f3      	bls.n	8002fcc <_printf_i+0xec>
 8002fe4:	2f08      	cmp	r7, #8
 8002fe6:	d109      	bne.n	8002ffc <_printf_i+0x11c>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	07db      	lsls	r3, r3, #31
 8002fec:	d506      	bpl.n	8002ffc <_printf_i+0x11c>
 8002fee:	6862      	ldr	r2, [r4, #4]
 8002ff0:	6923      	ldr	r3, [r4, #16]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	dc02      	bgt.n	8002ffc <_printf_i+0x11c>
 8002ff6:	2330      	movs	r3, #48	@ 0x30
 8002ff8:	3d01      	subs	r5, #1
 8002ffa:	702b      	strb	r3, [r5, #0]
 8002ffc:	9b03      	ldr	r3, [sp, #12]
 8002ffe:	1b5b      	subs	r3, r3, r5
 8003000:	6123      	str	r3, [r4, #16]
 8003002:	9b07      	ldr	r3, [sp, #28]
 8003004:	0021      	movs	r1, r4
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	9805      	ldr	r0, [sp, #20]
 800300a:	9b06      	ldr	r3, [sp, #24]
 800300c:	aa09      	add	r2, sp, #36	@ 0x24
 800300e:	f7ff fef7 	bl	8002e00 <_printf_common>
 8003012:	3001      	adds	r0, #1
 8003014:	d148      	bne.n	80030a8 <_printf_i+0x1c8>
 8003016:	2001      	movs	r0, #1
 8003018:	4240      	negs	r0, r0
 800301a:	b00b      	add	sp, #44	@ 0x2c
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800301e:	2220      	movs	r2, #32
 8003020:	6809      	ldr	r1, [r1, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	6022      	str	r2, [r4, #0]
 8003026:	2278      	movs	r2, #120	@ 0x78
 8003028:	4932      	ldr	r1, [pc, #200]	@ (80030f4 <_printf_i+0x214>)
 800302a:	9104      	str	r1, [sp, #16]
 800302c:	0021      	movs	r1, r4
 800302e:	3145      	adds	r1, #69	@ 0x45
 8003030:	700a      	strb	r2, [r1, #0]
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	6822      	ldr	r2, [r4, #0]
 8003036:	c940      	ldmia	r1!, {r6}
 8003038:	0610      	lsls	r0, r2, #24
 800303a:	d402      	bmi.n	8003042 <_printf_i+0x162>
 800303c:	0650      	lsls	r0, r2, #25
 800303e:	d500      	bpl.n	8003042 <_printf_i+0x162>
 8003040:	b2b6      	uxth	r6, r6
 8003042:	6019      	str	r1, [r3, #0]
 8003044:	07d3      	lsls	r3, r2, #31
 8003046:	d502      	bpl.n	800304e <_printf_i+0x16e>
 8003048:	2320      	movs	r3, #32
 800304a:	4313      	orrs	r3, r2
 800304c:	6023      	str	r3, [r4, #0]
 800304e:	2e00      	cmp	r6, #0
 8003050:	d001      	beq.n	8003056 <_printf_i+0x176>
 8003052:	2710      	movs	r7, #16
 8003054:	e7aa      	b.n	8002fac <_printf_i+0xcc>
 8003056:	2220      	movs	r2, #32
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	4393      	bics	r3, r2
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	e7f8      	b.n	8003052 <_printf_i+0x172>
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	680d      	ldr	r5, [r1, #0]
 8003064:	1d10      	adds	r0, r2, #4
 8003066:	6949      	ldr	r1, [r1, #20]
 8003068:	6018      	str	r0, [r3, #0]
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	062e      	lsls	r6, r5, #24
 800306e:	d501      	bpl.n	8003074 <_printf_i+0x194>
 8003070:	6019      	str	r1, [r3, #0]
 8003072:	e002      	b.n	800307a <_printf_i+0x19a>
 8003074:	066d      	lsls	r5, r5, #25
 8003076:	d5fb      	bpl.n	8003070 <_printf_i+0x190>
 8003078:	8019      	strh	r1, [r3, #0]
 800307a:	2300      	movs	r3, #0
 800307c:	9d03      	ldr	r5, [sp, #12]
 800307e:	6123      	str	r3, [r4, #16]
 8003080:	e7bf      	b.n	8003002 <_printf_i+0x122>
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	1d11      	adds	r1, r2, #4
 8003086:	6019      	str	r1, [r3, #0]
 8003088:	6815      	ldr	r5, [r2, #0]
 800308a:	2100      	movs	r1, #0
 800308c:	0028      	movs	r0, r5
 800308e:	6862      	ldr	r2, [r4, #4]
 8003090:	f000 f856 	bl	8003140 <memchr>
 8003094:	2800      	cmp	r0, #0
 8003096:	d001      	beq.n	800309c <_printf_i+0x1bc>
 8003098:	1b40      	subs	r0, r0, r5
 800309a:	6060      	str	r0, [r4, #4]
 800309c:	6863      	ldr	r3, [r4, #4]
 800309e:	6123      	str	r3, [r4, #16]
 80030a0:	2300      	movs	r3, #0
 80030a2:	9a03      	ldr	r2, [sp, #12]
 80030a4:	7013      	strb	r3, [r2, #0]
 80030a6:	e7ac      	b.n	8003002 <_printf_i+0x122>
 80030a8:	002a      	movs	r2, r5
 80030aa:	6923      	ldr	r3, [r4, #16]
 80030ac:	9906      	ldr	r1, [sp, #24]
 80030ae:	9805      	ldr	r0, [sp, #20]
 80030b0:	9d07      	ldr	r5, [sp, #28]
 80030b2:	47a8      	blx	r5
 80030b4:	3001      	adds	r0, #1
 80030b6:	d0ae      	beq.n	8003016 <_printf_i+0x136>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	079b      	lsls	r3, r3, #30
 80030bc:	d415      	bmi.n	80030ea <_printf_i+0x20a>
 80030be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030c0:	68e0      	ldr	r0, [r4, #12]
 80030c2:	4298      	cmp	r0, r3
 80030c4:	daa9      	bge.n	800301a <_printf_i+0x13a>
 80030c6:	0018      	movs	r0, r3
 80030c8:	e7a7      	b.n	800301a <_printf_i+0x13a>
 80030ca:	0022      	movs	r2, r4
 80030cc:	2301      	movs	r3, #1
 80030ce:	9906      	ldr	r1, [sp, #24]
 80030d0:	9805      	ldr	r0, [sp, #20]
 80030d2:	9e07      	ldr	r6, [sp, #28]
 80030d4:	3219      	adds	r2, #25
 80030d6:	47b0      	blx	r6
 80030d8:	3001      	adds	r0, #1
 80030da:	d09c      	beq.n	8003016 <_printf_i+0x136>
 80030dc:	3501      	adds	r5, #1
 80030de:	68e3      	ldr	r3, [r4, #12]
 80030e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	42ab      	cmp	r3, r5
 80030e6:	dcf0      	bgt.n	80030ca <_printf_i+0x1ea>
 80030e8:	e7e9      	b.n	80030be <_printf_i+0x1de>
 80030ea:	2500      	movs	r5, #0
 80030ec:	e7f7      	b.n	80030de <_printf_i+0x1fe>
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	0800368d 	.word	0x0800368d
 80030f4:	0800369e 	.word	0x0800369e

080030f8 <memmove>:
 80030f8:	b510      	push	{r4, lr}
 80030fa:	4288      	cmp	r0, r1
 80030fc:	d902      	bls.n	8003104 <memmove+0xc>
 80030fe:	188b      	adds	r3, r1, r2
 8003100:	4298      	cmp	r0, r3
 8003102:	d308      	bcc.n	8003116 <memmove+0x1e>
 8003104:	2300      	movs	r3, #0
 8003106:	429a      	cmp	r2, r3
 8003108:	d007      	beq.n	800311a <memmove+0x22>
 800310a:	5ccc      	ldrb	r4, [r1, r3]
 800310c:	54c4      	strb	r4, [r0, r3]
 800310e:	3301      	adds	r3, #1
 8003110:	e7f9      	b.n	8003106 <memmove+0xe>
 8003112:	5c8b      	ldrb	r3, [r1, r2]
 8003114:	5483      	strb	r3, [r0, r2]
 8003116:	3a01      	subs	r2, #1
 8003118:	d2fb      	bcs.n	8003112 <memmove+0x1a>
 800311a:	bd10      	pop	{r4, pc}

0800311c <_sbrk_r>:
 800311c:	2300      	movs	r3, #0
 800311e:	b570      	push	{r4, r5, r6, lr}
 8003120:	4d06      	ldr	r5, [pc, #24]	@ (800313c <_sbrk_r+0x20>)
 8003122:	0004      	movs	r4, r0
 8003124:	0008      	movs	r0, r1
 8003126:	602b      	str	r3, [r5, #0]
 8003128:	f7fd ffd2 	bl	80010d0 <_sbrk>
 800312c:	1c43      	adds	r3, r0, #1
 800312e:	d103      	bne.n	8003138 <_sbrk_r+0x1c>
 8003130:	682b      	ldr	r3, [r5, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d000      	beq.n	8003138 <_sbrk_r+0x1c>
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	bd70      	pop	{r4, r5, r6, pc}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	2000191c 	.word	0x2000191c

08003140 <memchr>:
 8003140:	b2c9      	uxtb	r1, r1
 8003142:	1882      	adds	r2, r0, r2
 8003144:	4290      	cmp	r0, r2
 8003146:	d101      	bne.n	800314c <memchr+0xc>
 8003148:	2000      	movs	r0, #0
 800314a:	4770      	bx	lr
 800314c:	7803      	ldrb	r3, [r0, #0]
 800314e:	428b      	cmp	r3, r1
 8003150:	d0fb      	beq.n	800314a <memchr+0xa>
 8003152:	3001      	adds	r0, #1
 8003154:	e7f6      	b.n	8003144 <memchr+0x4>

08003156 <memcpy>:
 8003156:	2300      	movs	r3, #0
 8003158:	b510      	push	{r4, lr}
 800315a:	429a      	cmp	r2, r3
 800315c:	d100      	bne.n	8003160 <memcpy+0xa>
 800315e:	bd10      	pop	{r4, pc}
 8003160:	5ccc      	ldrb	r4, [r1, r3]
 8003162:	54c4      	strb	r4, [r0, r3]
 8003164:	3301      	adds	r3, #1
 8003166:	e7f8      	b.n	800315a <memcpy+0x4>

08003168 <_realloc_r>:
 8003168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800316a:	0006      	movs	r6, r0
 800316c:	000c      	movs	r4, r1
 800316e:	0015      	movs	r5, r2
 8003170:	2900      	cmp	r1, #0
 8003172:	d105      	bne.n	8003180 <_realloc_r+0x18>
 8003174:	0011      	movs	r1, r2
 8003176:	f7ff fc55 	bl	8002a24 <_malloc_r>
 800317a:	0004      	movs	r4, r0
 800317c:	0020      	movs	r0, r4
 800317e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003180:	2a00      	cmp	r2, #0
 8003182:	d103      	bne.n	800318c <_realloc_r+0x24>
 8003184:	f7ff fbe2 	bl	800294c <_free_r>
 8003188:	002c      	movs	r4, r5
 800318a:	e7f7      	b.n	800317c <_realloc_r+0x14>
 800318c:	f000 f81c 	bl	80031c8 <_malloc_usable_size_r>
 8003190:	0007      	movs	r7, r0
 8003192:	4285      	cmp	r5, r0
 8003194:	d802      	bhi.n	800319c <_realloc_r+0x34>
 8003196:	0843      	lsrs	r3, r0, #1
 8003198:	42ab      	cmp	r3, r5
 800319a:	d3ef      	bcc.n	800317c <_realloc_r+0x14>
 800319c:	0029      	movs	r1, r5
 800319e:	0030      	movs	r0, r6
 80031a0:	f7ff fc40 	bl	8002a24 <_malloc_r>
 80031a4:	9001      	str	r0, [sp, #4]
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d101      	bne.n	80031ae <_realloc_r+0x46>
 80031aa:	9c01      	ldr	r4, [sp, #4]
 80031ac:	e7e6      	b.n	800317c <_realloc_r+0x14>
 80031ae:	002a      	movs	r2, r5
 80031b0:	42bd      	cmp	r5, r7
 80031b2:	d900      	bls.n	80031b6 <_realloc_r+0x4e>
 80031b4:	003a      	movs	r2, r7
 80031b6:	0021      	movs	r1, r4
 80031b8:	9801      	ldr	r0, [sp, #4]
 80031ba:	f7ff ffcc 	bl	8003156 <memcpy>
 80031be:	0021      	movs	r1, r4
 80031c0:	0030      	movs	r0, r6
 80031c2:	f7ff fbc3 	bl	800294c <_free_r>
 80031c6:	e7f0      	b.n	80031aa <_realloc_r+0x42>

080031c8 <_malloc_usable_size_r>:
 80031c8:	1f0b      	subs	r3, r1, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1f18      	subs	r0, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da01      	bge.n	80031d6 <_malloc_usable_size_r+0xe>
 80031d2:	580b      	ldr	r3, [r1, r0]
 80031d4:	18c0      	adds	r0, r0, r3
 80031d6:	4770      	bx	lr

080031d8 <_init>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr

080031e4 <_fini>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr
